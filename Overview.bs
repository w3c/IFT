<pre class='metadata'>
Title: Incremental Font Transfer
Shortname: PFE
Status: w3c/ED
Group: webfontswg
Level: none
TR: https://www.w3.org/TR/example/
ED: https://w3c.github.io/PFE/Overview.html
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Editor: Garret Rieger, Google Inc., grieger@google.com
Abstract: Example example
Status Text: This is a largely empty document because we have just started working on it.
</pre>

<!--
    for things that are not in specref
    https://www.specref.org/
-->
<pre class=biblio>
	{
		"PFE-report": {
            "href": "https://www.w3.org/TR/PFE-evaluation/",
            "authors": [
                "Chris Lilley"
                ],
            "status": "Note",
            "publisher": "W3C",
			"title": "Progressive Font Enrichment: Evaluation Report",
			"date": "15 October 2020"
		}
	}
</pre>

Introduction {#intro}
=====================

	<em>This section is not normative.</em>

    The success of WebFonts is unevenly distributed. This specification allows WebFonts to be used where slow networks, very large fonts, or complex subsetting requirements currently preclude their use. For example, even using WOFF 2 [[WOFF2]], fonts for CJK languages are too large to be practical.

    See the Progressive Font Enrichment: Evaluation Report [[PFE-report]] for the investigation which led to this specification.

Patch Based Incremental Transfer {#patch-incxfer}
=================================================

Overview {#patch-overview}
--------------------------

In the patch subset approach to incremental font transfer a server generates binary patches which a
client applies to a subset of the font in order to extend the coverage of that font subset. The server
is stateless, it does not maintain any session data for clients between requests. Thus when a client
requests the generation of a patch from the server it must fully describe the current subset of the
font that it has in a way which allows the server to recreate it.

Generic binary patch algorithms are used which do not need to be aware of the specifics of the font
format. Typically a server will produce a patch by generating two font subsets: one which matches what
the client currently has and one which matches the extended subset the client desires. A binary patch
is then produced between the two subsets.

### Font Subset ### {#font-subset}

A subset of a font file is a modified version of the font that contains only the data needed to
render a subset of the codepoints in the original font. A subsetted font should be able to render
any combination of the codepoints in the subset identically to the original font.

Data Types {#data-types}
------------------------

This section lists all of the data types that are used to form the request and response messages
sent between the client and server.

### Encoding ### {#encoding}

All data types defined here are encoded into a byte representation for transport using CBOR
(Concise Binary Object Representation) [[!rfc8949]]. More information on how each data types
should be encoded by CBOR are given in the definition of those data types.

### Primitives ### {#primitives}

<table>
  <tr>
    <th>Data Type</th><th>Description</th><th>CBOR Major Type</th>
  </tr>
  <tr>
    <td>Integer</td><td>An integer value range [-2^64 - 1, 2^64 - 1] inclusive.&nbsp;</td><td>0 or 1</td>
  </tr>
  <tr>
    <td>ByteString</td><td>Variable number of bytes.</td><td>2</td>
  </tr>
  <tr>
    <td>ArrayOf&lt;Type&gt;</td><td>Array of a variable number of items of Type.</td><td>4</td>
  </tr>
</table>

### SparseBitSet ### {#sparsebitset}

A data structure which compactly stores a set of distinct unsigned integers. The set is represented as
a tree where each node has a fixed number of children that recursively sub-divides an interval into
equal partitions. A tree of height <i>H</i> with branching factor <i>B</i> can store set membership
for integers in the interval [0 to <i>B</i><sup><i>H</i></sup>-1] inclusive. The tree is encoded into
a ByteString for transport.

To construct the tree <i>T</i> which encodes set <i>S</i> first select the branching factor <i>B</i>
(how many children each node has). <i>B</i> can be 4, 8, 16, or 32.

Note: the encoder can use any of the possible branching factors, but it is recommended to
use 4 as that has been shown to give the smallest encodings for most sets typically encountered.

Next, determine the height, <i>H</i>, of the tree:

<i>H</i> = ceil(log<sub><i>B</i></sub>(max(</i>S</i>) + 1))

Next create a tree of height H where all non-leaf nodes have <i>B</i> children. Each node in the tree
has a single value composed of <i>B</i> bits. Given a node <i>p</i> which has <i>B</i> children:
<i>c<sub>0</sub></i> ... <i>c<sub><i>B</i> - 1</sub></i> and is in a tree, <i>T</i>, of height
<i>H</i>, then:

*  D(<i>n</i>) is depth of node <i>n</i>: the number of edges between
    the root node and <i>n</i>.

*  Start(<i>c<sub>i</sub></i>) is the start (inclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     Start(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + <i>i</i> * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>

*  End(<i>c<sub>i</sub></i>) is the end (exclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     End(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + (<i>i</i> + 1) * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>

*  Start(root node) = 0

*  The value of node <i>p</i> is a string of <i>B</i> bits. If its bits are numbered from 0 (least
    significant) to <i>B</i> - 1 (most significant) then bit <i>i</i> will be 1 if the set <i>S</i>
    contains at least one member in the interval [Start(<i>c<sub>i</sub></i>),
    End(<i>c<sub>i</sub></i>)), otherwise bit <i>i</i> will be 0.

*  If for node <i>p</i>, End(<i>p</i>) - Start(<i>p</i>) = <i>B</i>, then <i>p</i> will have no
    children.

The tree is encoded into a bit string. When appending multiple-bit values to the bit string, bits
are added in order from least significant bit to most significant bit.

First append 2 bits which encode the branching factor:

<table>
  <tr>
    <th>Bits&nbsp;</th><th>Branching Factor</th>
  </tr>
  <tr><td>00</td><td>4</td></tr>
  <tr><td>01</td><td>8</td></tr>
  <tr><td>10</td><td>16</td></tr>
  <tr><td>11</td><td>32</td></tr>
</table>

Then append the value <i>H</i> - 1 as a 6 bit unsigned integer.

Next the nodes are encoded into the bit string by traversing the nodes of the <i>T</i> in level
order and appending the value for each non-zero node to the bit string. If all of the set values
covered by a node's interval are present within set <i>S</i>, then that node can instead be encoded
in the bit string as <i>B</i> bits all set to zero. All children of that node must not be encoded.

Lastly the bit string is converted into a ByteString by converting each consecutive group of 8 bits
into the next byte of the string.
If the number of bits in the bit string is not a multiple of 8, zero bits are appended to the
next multiple of 8.
The bit with the smallest index in the bit string is the least
significant bit in the byte and the bit with the largest index is the most significant bit.


<div class=example>
  The set {2, 33, 323} in a tree with a branching factor of 8 is encoded as the bit string:

  ```
  BitString:
  |- header |- lvl 0 |---- level 1 ----|------- level 2 -----------|
  |         |   n0   |   n1       n2   |   n3       n4       n5    |
  [ 10010000 10000100 10001000 10000000 00100000 01000000 00010000 ]

  Which then becomes the ByteString:
  [
    0b00001001,
    0b00100001,
    0b00010001,
    0b00000001,
    0b00000100,
    0b00000010,
    0b00001000
  ]
  ```

  First determine the height of the tree:

  <i>H</i> = ceil(log<sub>8</sub>(323 + 1)) = 3

  Then append

  *  branching factor = 8 = 01
  *  <i>H</i> - 1 = 2 = 000010

  Level 0:

  * root node, n<sub>0</sub> append 00100001. Bit 0 is set because there are set members in the interval
     [0, 64), and bit 5 is set due to members in the interval [320, 384).

  Level 1:

  * There will be two non-zero children corresponding to bit 0 and bit 5 in n<sub>0</sub>:
  * n<sub>1</sub> append 00010001. It is child 0 of n<sub>0</sub> and subdivides the interval
     [0, 64). Bit 0 is set since there are set members in [0, 8) and bit 4 for [32, 40).

  * n<sub>2</sub> append 00000001. It is child 5 of n<sub>0</sub> it subdivides the interval
     [320, 384). Bit 0 is set since there are set members in [320 - 328).

  Level 2:

  * n<sub>3</sub> append 00000100. Child 0 of n<sub>1</sub>, bit 2 is set for the interval [2, 3) or 2.
  * n<sub>4</sub> append 00000010. Child 4 of n<sub>1</sub>, bit 1 is set for the interval [33, 34) or 33.
  * n<sub>5</sub> append 00001000. Child 0 of n<sub>2</sub>, bit 3 is set for the interval [323, 324)
     or 323.

</div>

<div class=example>
  The set {0, 1, 2, ..., 17} can be encoded with a branching factor of 4 as:

  ```
  BitString:
  |- header | l0 |- lvl 1 -| l2  |
  |         | n0 | n1 | n2 | n3  |
  [ 00010000 1100 0000 1000 1100 ]

  ByteString:
  [
    0b00001000,
    0b00000011,
    0b00110001
  ]
  ```

  First determine the height of the tree:

  <i>H</i> = ceil(log<sub>4</sub>(17 + 1)) = 3

  Then append

  *  branching factor = 4 = 00
  *  <i>H</i> - 1 = 2 = 000010

  Level 0:
  *  n<sub>0</sub> append 0011. Bit 0 set for [0, 16), bit 1 set for [16, 32)

  Level 1:
  *  n<sub>1</sub> append 0000. All bits zero to indicate interval [0, 16) is fully filled.
  *  n<sub>2</sub> append 0001. Bit 0 set for [16, 20)

  Level 2:
  *  n<sub>3</sub> append 0011. Bit 0 set for value 16, bit 1 set for value 17.

</div>

### Objects ### {#objects}

Objects are data structures comprised of key and value pairs. Objects are encoded via CBOR as maps
(major type 5). Each key and value pair is encoded as a single map entry. Keys are always unsigned
integers and are encoded using major type 0. Values are encoded using the encoding specified by the
type of the value.

All fields in an object are optional and do not need to have an associated value. Conversely when
decoding and object fields may be present which are not specified in the schema. The decoder must
ignore without error any key and value pairs where the key is not recognized.

There are several types of object used, each type is defined by a schema in [[#schemas]]. The schema
for a type specifies for each field:

*  A human readable name for the field. For reference only, not used in the encoding.
*  A unsigned integer id for the field. This is used as the key in the encoding.
*  The type of the value stored in this field. Can be any of the types defined in [[#data-types]]
    including object types.

### Object Schemas ### {#schemas}

#### CompressedList #### {#CompressedList}

<table>
  <tr><th>ID&nbsp;</th><th>Field Name&nbsp;</th><th>Value Type</th></tr>
  <tr><td>0</td><td>value_deltas</td><td>ArrayOf&lt;Integer&gt;</td></tr>
</table>

Encodes a list of unsigned integers. The list is ordered and allows
duplicate values. Given a list L to be encoded the array value_deltas is calculated:

```
value_deltas = []
if len(L) > 0:
  value_deltas[0] = L[0]
  for i in range(1, len(L)):
    value_deltas[i] = L[i] - L[i-1]
```

<div class=example>
  The list [2, 2, 5, 1, 3, 7] would be encoded as [2, 0, 3, -4, 2, 4].
</div>

#### CompressedSet #### {#CompressedSet}

Encodes a set of unsigned integers. The set is not ordered and does not
allow duplicates. Members of the set are encoded into either a sparse bit
set or a list of ranges. To obtain the final set the members of the sparse
bit set and the list of ranges are unioned together.

The list of ranges is encoded as a series of deltas. For example the ranges

[3, 10], [13, 15], [17, 17] would be encoded as [3, 7, 3, 2, 2, 0].

<table>
  <tr><th>ID&nbsp;</th><th>Field Name</th><th>Type</th></tr>
  <tr><td>0</td><td>sparse_bit_set</td><td>SparseBitSet</td></tr>
  <tr><td>1</td><td>range_deltas</td><td>ArrayOf&lt;Integer&gt;</td></tr>
</table>

#### PatchRequest #### {#PatchRequest}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>protocol_version</td><td>Integer</td></tr>
  <tr><td>1</td><td>accept_patch_format</td><td>ArrayOf&lt;Integer&gt;</td></tr>
  <tr><td>2</td><td>codepoints_have</td><td>CompressedSet</td></tr>
  <tr><td>3</td><td>codepoints_needed</td><td>CompressedSet</td></tr>
  <tr><td>4</td><td>indices_have</td><td>CompressedSet</td></tr>
  <tr><td>5</td><td>indices_needed</td><td>CompressedSet</td></tr>
  <tr><td>6</td><td>ordering_checksum</td><td>Integer</td></tr>
  <tr><td>7</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>8</td><td>base_checksum</td><td>Integer</td></tr>
</table>

For a PatchRequest object to be well formed:

*  <code>protocol_version</code> must be set to 0.
*  <code>accept_patch_format</code> can include any of the values listed in [[#patch-formats]].
*  If either of <code>indices_have</code> or <code>indices_needed</code> is set to a non-empty set
    then <code>ordering_checksum</code> must be set.
*  If <code>codepoints_have</code> or <code>indices_have</code> is set to a non-empty set then
    <code>original_font_checksum</code> and <code>base_checksum</code> must be set.

#### PatchResponse #### {#PatchResponse}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>protocol_version</td><td>Integer</td>
  <tr><td>1</td><td>patch_format</td><td>Integer</td></tr>
  <tr><td>2</td><td>patch</td><td>ByteString</td></tr>
  <tr><td>3</td><td>replacement</td><td>ByteString</td></tr>

  <tr><td>4</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>5</td><td>patched_checksum</td><td>Integer</td></tr>

  <tr><td>6</td><td>codepoint_ordering</td><td>CompressedList</td></tr>
  <tr><td>7</td><td>ordering_checksum</td><td>Integer</td></tr>
</table>

For a PatchRequest object to be well formed:
*  <code>protocol_version</code> must be set to 0.
*  <code>patch_format</code> can be any of the values listed [[#patch-formats]]
*  Only one of <code>patch</code> or <code>replacement</code> may be set.
*  If either <code>patch</code> or <code>replacement</code> is set then <code>patch_format</code>,
     <code>patched_checksum</code>, and <code>original_font_checksum</code> must be set.
*  If <code>codepoint_ordering</code> is set then <code>ordering_checksum</code> must be set.

Client {#client}
----------------

### Client State ### {#client-state}

The client will need to maintain at minimum the following state for each font file being incrementally
transferred:

*  Font subset: a byte array containing the binary data for the most recent version of the subset of
    the font being incrementally transferred. For a new font this is initialized to empty byte array.
*  Original font checksum: the most recent value of
    <a href="#PatchResponse"><code>PatchResponse.original_font_checksum</code></a> received
    from the server for this font.
*  Codepoint Reordering Map: The most recent [[#codepoint-reordering]] received from the server
    for this font.
*  Codepoint Reordering Checksum: The most recent
    <a href="#PatchResponse"><code>PatchResponse.ordering_checksum</code></a>
    for this font.

### Extending the Font Subset ### {#extend-subset}

A client extends its font subset to cover additional codepoints by making HTTP requests to
a Patch Subset server. The HTTP request must use either the GET or POST method:

*  If sent as a POST request the post body will be a single
    <a href="#PatchRequest"><code>PatchRequest</code></a> object encoded via CBOR.

*  If sent as a GET request the client will include a single query parameter,
    <code>request</code>:<br/> the value is a single
    <a href="#PatchRequest"><code>PatchRequest</code></a> object encoded via CBOR and then base64url
    encoding [[rfc4648]].

For both POST and GET requests the path of the request identifies the specific font. All requests
must be made over HTTPS.

The fields of the <a href="#PatchRequest"><code>PatchRequest</code></a> object should be set
as follows:

*  <code>protocol_version</code>: set to 0.

*  <code>accept_patch_format</code>: set to the list of [[#patch-formats]] that this client is
    capable of decoding. Must contain at least one format.

*  <code>codepoints_have</code>: set to exactly the set of codepoints that the current font subset
    contains data for. If the current font subset is an empty byte array this field is left unset.
    If the client has a codepoint ordering for this font then this field should not be set.

*  <code>codepoints_needed</code>: set to the set of codepoints that the client wants to
    add to its font subset. If the client has a codepoint ordering for this font then this
    field should not be set.

*  <code>indices_have</code>: encodes the set of additional codepoints that the current
    font subset contains data for. The codepoint values are transformed to indices by applying
    [[#codepoint-reordering]] to each codepoint value. If the client does not have a codepoint
    ordering for this font then this field should not be set.

*  <code>indices_needed</code>: encodes the set of codepoints that the client wants to add to its
    font subset. The codepoint values are transformed to indices by applying
    [[#codepoint-reordering]] to each codepoint value. If the client does not have a codepoint
    ordering for this font then this field should not be set.

*  <code>ordering_checksum</code>: If either of <code>indices_have</code> or
    <code>indices_needed</code> is set then this must be set to the current value of
    <code>ordering_checksum</code> saved in the state for this font.

*  <code>original_font_checksum</code>:
    Set to saved value for <code>original_font_checksum</code> in the state for this font. If
    there is no saved value leave this field unset.

*  <code>base_checksum</code>:
    Set to the checksum of the font subset byte array saved in the state for this font. See:
    [[#computing-checksums]].

### Handling PatchResponse ### {#handling-patch-response}

If a server is able to succsessfully process a <a href="#PatchRequest"><code>PatchRequest</code></a>
if will respond with HTTP status code 200 and the body of the response will be a
<a href="#PatchResponse"><code>PatchResponse</code></a> object encoded via CBOR. The client
should interpret and process the fields of the object as follows:

1.  If field <code>replacement</code> is set then: the byte array in this field is a binary patch
     in the format specified by <code>patch_format</code>. Apply the binary patch to a base which
     is a empty byte array. Replace the saved font subset with the result of the patch application.

2. If field <code>patch</code> is set then:  the byte array in this field is a binary patch
    in the format specified by <code>patch_format</code>. Apply the binary patch to the saved font
    subset. Replace the saved font subset with the result of the patch application.

3. If either <code>replacement</code> or <code>patch</code> is set then:
    <a href="#computing-checksums">compute the checksum</a> of the font subset produced by the patch
    application in steps 1 or 2. If the computed checksum is not equal to <code>patched_checksum</code>
    this is a recoverable error. Follow the procedure in [[#client-side-checksum-mismatch]]. Otherwise
    update the saved original font checksum with the value in <code>original_font_checksum</code>.

4. If fields <code>codepoint_ordering</code> and <code>ordering_checksum</code> are set then update
    the saved codepoint ordering and checksum with the new values specified by these two fields.
    If neither <code>replacement</code> nor <code>patch</code> are set, then the client should
    resend the request that triggered this response but use the new codepoint ordering provided in
    this response.

### Client Side Checksum Mismatch ### {#client-side-checksum-mismatch}

If the the checksum of the font subset computed by the client does not match the
<code>patched_checksum</code> in the server's response then the client should:

1. Discard all currently saved state for this font.

2. <a href="#extend-subset">Resend the request</a>. Set the <code>codepoints_needed</code> field
    to the union of the codepoints in the discarded font subset and the set of code points
    the the previous request was trying to add.

Server {#server}
----------------

### Responding to a PatchRequest ### {#handling-patch-request}

If the server receives a well formed <a href="#PatchRequest"><code>PatchRequest</code></a> over
HTTPS that was populated according to the requirements in [[#extend-subset]] then it should
respond with HTTP status code 200. The body of the response should be a single
<a href="#PatchRequest"><code>PatchResponse</code></a> object encoded via CBOR.

The path in the request identifies the specific font that a patch is desired for. From the request
object the server can produce two codepoint sets:

1.  Codepoints the client has: formed by the union of the codepoint sets specified by
     <code>codepoints_have</code> and <code>indices_have</code>. The indices in
     <code>indices_have</code> must be mapped to codepoints by the application of the
     codepoint reordering with a checksum matching <code>ordering_checksum</code>.

2.  Codepoints the client needs: formed by the union of the codepoint sets specified by
     <code>codepoints_needed</code> and <code>indices_needed</code>. The indices in
     <code>indices_have</code> must be mapped to codepoints by the application of the
     codepoint reordering with a checksum matching <code>ordering_checksum</code>.

If the server does not recognize the codepoint ordering used by the client, it must respond
with a response that will cause the client to update it's codepoint ordering to one the server
will recognize via the process described in [[#handling-patch-response]] and not include any patch.
That is the <code>patch</code> and <code>replacement</code> fields must not be set.

Otherwise when the response is applied by the client following the process in
[[#handling-patch-response]] to a font subset with checksum <code>base_checksum</code> it must result
in an extended font subset that contains data for at least the union of the set of codepoints needed
and the sets of codepoints the client already has. The format of the patch in the either the
<code>patch</code> or <code>replace</code> fields must be one of those listed in
<code>accept_patch_format</code>.

Note: the server can respond with either a patch or a replacement but should try to produce a patch
where possible. Replacement's should only be used in situations where the server is unable to recreate
the clients state in order to generate a patch against it.

Possible error responses:

*  If the request is malformed the server may instead respond with http status code 400 to indicate an
    error.

*  If the requested font is not recognized by the server it may respond with http status code 404 to
    indicate a not found error.

Procedures {#procedures}
------------------------

### Computing Checksums ### {#computing-checksums}

TODO(garretrieger): write this.

### Codepoint Reordering ### {#codepoint-reordering}

TODO(garretrieger): write this.

#### Computing Checksum #### {#reordering-checksum}

TODO(garretrieger): write this.

#### Recommended algorithm #### {#reordering-algorithm}

TODO(garretrieger): write this.

### Patch Formats ### {#patch-formats}

The following patch formats may be used by the server to create binary diffs between a source file
and a target file:

<table>
  <tr>
    <th>Format</th><th>Value</th><th>Notes</th>
  </tr>
  <tr>
    <td>VCDIFF</td><td>0</td>
    <td>Uses VCDIFF format [[!rfc3284]] to produce the patch. All client and server implementations
    must support this format.</td>
  </tr>
  <tr>
    <td>Brotli Shared Dictionary</td><td>1</td>
    <td>Uses brotli compression [[!rfc7932]] to produce the patch. The source file is used as a shared
    dictionary given to the brotli compressor and decompressor.</td>
  </tr>
</table>

TODO(garretrieger): reference updated brotli spec which includes shared dictionary.

Range Request Incremental Transfer {#range-request-incxfer}
===========================================================

Negotiating Incremental Transfer Type {#negotiating-transfer-type}
==================================================================

<h2 class=no-num id=priv-sec>Privacy and Security Considerations</h2>

Issue: Note any issues that have been raised about privacy and security.
