<pre class='metadata'>
Title: Incremental Font Transfer
Shortname: IFT
Status: w3c/ED
Prepare for TR: no
Group: webfontswg
Level: none
TR: https://www.w3.org/TR/IFT/
ED: https://w3c.github.io/IFT/Overview.html
Previous Version: https://www.w3.org/TR/2021/WD-IFT-20210907/
Previous Version: https://www.w3.org/TR/2022/WD-RangeRequest-20220125/
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Editor: Garret Rieger, Google Inc., grieger@google.com, w3cid 73905
Abstract: This specification defines two methods to incrementally transfer fonts from server to client.
          Incremental transfer allows clients to load only the portions of the font they actually need
	  which speeds up font loads and reduces data transfer needed to load the fonts. A font can
	  be loaded over multiple requests where each request incrementally adds additional data.
</pre>

<!--
    for things that are not in specref
    https://www.specref.org/
-->

<pre class=link-defaults>
spec:fetch; type:dfn; for:/; text:status
</pre>

<pre class=biblio>
{
  "PFE-report": {
    "href": "https://www.w3.org/TR/PFE-evaluation/",
    "authors": ["Chris Lilley"],
    "status": "Note",
    "publisher": "W3C",
    "title": "Progressive Font Enrichment: Evaluation Report",
    "date": "15 October 2020"
  },

  "Shared-Brotli": {
    "href": "https://datatracker.ietf.org/doc/html/draft-vandevenne-shared-brotli-format-08",
    "authors": [
      "J. Alakuijala",
      "T. Duong",
      "R. Obryk",
      "Z. Szabadka",
      "L. Vandevenne"
    ],
    "status": "Internet Draft",
    "title": "Shared Brotli Compressed Data Format",
    "date": "27 Jul 2021"
  },


  "OpenType-Variations": {
    "href": "https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview",
    "authors": [],
    "status": "Note",
    "publisher": "Microsoft",
    "title": "OpenType Font Variations Overview",
    "date": "23 October 2020"
  },

  "fast-hash": {
    "href": "https://github.com/ztanml/fast-hash",
    "authors": ["ztanml"],
    "status": "Note",
    "publisher": "ztanml",
    "title": "fast-hash",
    "date": "22 October 2018"
  },

  "fetch": {
    "href": "https://fetch.spec.whatwg.org/",
    "authors": [],
    "status": "Living Standard",
    "publisher": "What WG",
    "title": "Fetch Standard",
    "date": "13 December 2021"
  }
}
</pre>

<style>
.conform:hover {background: #31668f}
.conform:target {padding: 2px; border: 2px solid #AAA; background: #31668f }
</style>

Introduction {#intro}
=====================

<em>This section is not normative.</em>

Incremental Font Transfer (IFT) is a collection of technologies to improve the latency of remote fonts (or "web fonts") on the web. Without this technology, a browser needs to download every last byte of a font before it can render any characters using that font. IFT allows the browser to download only some of the bytes in the file, thereby decreasing the perceived latency between the time when a browser realizes it needs a font and when the necessary text can be rendered with that font.

The success of WebFonts is unevenly distributed. This specification allows WebFonts to be used where
slow networks, very large fonts, or complex subsetting requirements currently preclude their use. For
example, even using WOFF 2 [[WOFF2]], fonts for CJK languages are too large to be practical.

There are two different methods which can be used to incrementally transfer fonts.

Patch Subset {#patch-subset}
----------------------------

In the the first method, <a href="patch-incxfer">Patch Subset</a> a server generates binary patches which a
client applies to a subset of the font in order to extend the coverage of that subset. The server
is stateless, it does not maintain any session data for clients between requests. Thus when a client
requests the generation of a patch from the server it has to fully describe the current subset of the
font that it has in a way which allows the server to recreate it.

Generic binary patch algorithms are used which do not need to be aware of the specifics of the font
format. Typically a server will produce a patch by generating two font subsets: one which matches what
the client currently has and one which matches the extended subset the client desires. A binary patch
is then produced between the two subsets.

Range Request {#range-request}
------------------------------

The second
method, <a href="#range-request-incxfer">Range Request</a>, has no server-side requirements other than the server should be able to respond to byte-based range requests. The browser makes range requests to the server for the specific bytes in the font file that it needs. In order to know which bytes are necessary, the browser makes one initial special request for the beginning of the file to obtain all required font tables, and then calculates glyph coverage and required byte ranges using font character-to-glyph mapping and glyph substitution / layout tables.

In order for the range request method to be as effective as possible, the font file itself should be internally arranged in a particular way, in order to decrease the number of requests the browser needs to make. Therefore, it is expected that web developers wishing to use the range request method will use font files that have had their contents already arranged optimally.

This method was modelled after video playback on the web, where seeking in a video causes the browser to send a range request to the server.

Technical Motivation: Evaluation Report {#evaluation-report}
------------------------------------------------------------

See the Progressive Font Enrichment: Evaluation Report [[PFE-report]] for the investigation which led
to this specification.

The evaluation report found that patch subset was generally more efficient in terms of overall
performance and transferred bytes than range request. However, Range Request is simpler to deploy
for many uses cases while still providing material improvments to loading performance for large fonts.

Opt-In Mechanism {#opt-in}
==========================

<em>This section is general to both IFT methods.</em>

The collection of IFT technologies utilizes a single shared opt-in mechanism. Each method does not use its own opt-in mechanism; instead, the webpage opts into the IFT technologies as a whole, and the browser and server negotiate to decide which specific method will be employed.

The opt-in mechanism is the <code>incremental</code> keyword inside the ''@font-face'' block. Websites specify this keyword inside their <code>@font-face</code> block, and the browser is then responsible for using IFT technologies, and for negotiating with the server to determine which specific IFT method to use.

<div class=example>
The use of the <code>incremental</code> keyword in this CSS rule indicates to the browser they should use IFT.
<pre>
@font-face {
    font-family: "MyCoolWebFont";
    src: url("MyCoolWebFont.otf") tech(incremental);
}
</pre>
</div>

Note: Each individual <code>@font-face</code> block may or may not opt-in to IFT. This is due to the variety of ways fonts are used on web pages. Authors have control over which fonts they want to use this technology with, and which they do not.

IFT Method Selection {#method-selection}
========================================

<em>This section is general to both IFT methods.</em>

When a page has indicated that a particular font should utilize IFT technology, the browser must determine which method to use. Different browsers may support different IFT methods, and different servers may support different IFT methods, so a negotation occurs as such:

1. The browser makes the first request to the server. If the client prefers the <a href="https://w3c.github.io/IFT/Overview.html#patch-incxfer">patch-subset method</a>, it sends the relevant <a href="https://w3c.github.io/IFT/Overview.html#negotiating-transfer-type">query parameter</a>. If the client prefers the range-request method, it does not send the query parameter.
2. If the server receives the patch-subset query parameter and wishes to honor it, the server may reply with a valid <a href="https://w3c.github.io/IFT/Overview.html#PatchResponse">patch subset response</a> which includes the <a href="https://w3c.github.io/IFT/Overview.html#handling-patch-response">patch-subset magic number</a>. Otherwise, the server may reply with the [[!RFC7233]] <a href="https://httpwg.org/specs/rfc7233.html#header.accept-ranges"><code>Accept-Ranges</code></a> header.
3. If the client receives the patch-subset magic number, it commences using the patch-subset method. Otherwise, if the client receives the <code>Accept-Ranges: bytes</code> header, it commences using the range-request method. Otherwise, the whole font file is downloaded, and the current non-incremental loading behavior is used.

IFT Method Fallback {#fallback}
-------------------------------

<em>This section is not normative.</em>

This summarizes behaviors that result from the above method selection.

<table class="data">
    <thead>
        <tr>
            <th>&nbsp;
            <th>Client prefers range-request method
            <th>Client prefers patch-subset method
    <tbody>
        <tr><th>Server supports both range-request method and patch-subset method
            <td>Client makes initial request without query parameter, and possibly with the <code>Range</code> header. Because all patch-subset servers must support the range-request method, the server replies with <code>Accept-Ranges</code> and initial font data. Client/server commence using range-request method.

            Issue: <a href="https://github.com/w3c/IFT/issues/56">Server-recommended IFT Method selection</a>

            <td>Client makes initial request with query parameter. Server replies with the patch-subset magic number, and client/server commence using patch-subset method.
        <tr><th>Server supports only range-request method
            <td>Same as above.
            <td>Client makes initial request with query parameter. Server replies with <code>Accept-Ranges</code> and initial font data. Client/server commence using range-request method.
        <tr><th>Server supports neither
            <td>Client makes initial request without query parameter, and possibly with the <code>Range</code> header. Server replies without <code>Accept-Ranges</code> header, and sends the full font file to the client from beginning to end.
            <td>Client makes initial request to server with query parameter. Server does not reply with the patch-subset magic number, and sends the full font file to the client from beginning to end.
</table>

Patch Based Incremental Transfer {#patch-incxfer}
=================================================

Font Subset {#font-subset}
--------------------------

A subset of a font file is a modified version of the font that contains only the data needed to
render a subset of the codepoints supported by the original font. When a subsetted font is used to
render text using any combination of the subset codepoints it must render identically to the original
font. This includes any optional features that a renderer may choose to use from the original font such
as hinting instructions, positioning rules, and/or glyph substitutions. Where possible the subsetted
font file should not include data from the original font that is not necessary to achieve this
equivalence.


Data Types {#data-types}
------------------------

This section lists all of the data types that are used to form the request and response messages
sent between the client and server.

### Encoding ### {#encoding}

All data types defined here are encoded into a byte representation for transport using CBOR
(Concise Binary Object Representation) [[!RFC8949]]. More information on how each data types
should be encoded by CBOR are given in the definition of those data types.

### Primitives ### {#primitives}

<table>
  <tr>
    <th>Data Type</th><th>Description</th><th>CBOR Major Type</th>
  </tr>
  <tr>
    <td>Integer</td><td>An integer value range [-2<sup>64</sup> - 1, 2<sup>64</sup> - 1] inclusive.</td>
    <td>0 or 1</td>
  </tr>
  <tr>
    <td>Float</td><td>IEEE 754 Single-Precision Float.</td><td>7</td>
  </tr>
  <tr>
    <td>ByteString</td><td>Variable number of bytes.</td><td>2</td>
  </tr>
  <tr>
    <td>ArrayOf&lt;Type&gt;</td><td>Array of a variable number of items of Type.</td><td>4</td>
  </tr>
</table>

### ProtocolVersion ### {#protocol-version}

An Integer describing the version of this communication protocol being used by a
PatchRequest or PatchResponse. This value guides the semantics and interpretation
of the fields sent.

This field is for future expansion. There currently is only one valid value, 0.

### SparseBitSet ### {#sparsebitset}

A data structure which compactly stores a set of distinct unsigned integers. The set is represented as
a tree where each node has a fixed number of children that recursively sub-divides an interval into
equal partitions. A tree of height <i>H</i> with branching factor <i>B</i> can store set membership
for integers in the interval [0 to <i>B</i><sup><i>H</i></sup>-1] inclusive. The tree is encoded into
a ByteString for transport.

To construct the tree <i>T</i> which encodes set <i>S</i> first select the branching factor <i>B</i>
(how many children each node has). <i>B</i> can be 4, 8, 16, or 32.

Note: the encoder can use any of the possible branching factors, but it is recommended to
use 4 as that has
<a href="https://github.com/w3c/PFE-analysis/blob/main/results/set_encoding_branch_factor.md">been shown</a>
to give the smallest encodings for most sets typically encountered.

Next, determine the height, <i>H</i>, of the tree:

<i>H</i> = ceil(log<sub><i>B</i></sub>(max(<i>S</i>) + 1))

If <i>S</i> is an empty set then <i>H</i> = 1.

Next create a tree of height H where all non-leaf nodes have <i>B</i> children. Each node in the tree
has a single value composed of <i>B</i> bits. Given a node <i>p</i> which has <i>B</i> children:
<i>c<sub>0</sub></i> ... <i>c<sub><i>B</i> - 1</sub></i> and is in a tree, <i>T</i>, of height
<i>H</i>, then:

*  D(<i>n</i>) is depth of node <i>n</i>: the number of edges between
    the root node and <i>n</i>.

*  Start(<i>c<sub>i</sub></i>) is the start (inclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     Start(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + <i>i</i> * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>

*  End(<i>c<sub>i</sub></i>) is the end (exclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     End(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + (<i>i</i> + 1) * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>

*  Start(root node) = 0

*  The value of node <i>p</i> is a string of <i>B</i> bits. If its bits are numbered from 0 (least
    significant) to <i>B</i> - 1 (most significant) then bit <i>i</i> will be 1 if the set <i>S</i>
    contains at least one member in the interval [Start(<i>c<sub>i</sub></i>),
    End(<i>c<sub>i</sub></i>)), otherwise bit <i>i</i> will be 0.

*  If for node <i>p</i>, End(<i>p</i>) - Start(<i>p</i>) = <i>B</i>, then <i>p</i> will have no
    children.

*  An empty set is considered to have no nodes.

The tree is encoded into a bit string. When appending multiple-bit values to the bit string, bits
are added in order from least significant bit to most significant bit.

First append 2 bits which encode the branching factor:

<table>
  <tr>
    <th>Bits&nbsp;</th><th>Branching Factor</th>
  </tr>
  <tr><td>00</td><td>2</td></tr>
  <tr><td>01</td><td>4</td></tr>
  <tr><td>10</td><td>8</td></tr>
  <tr><td>11</td><td>32</td></tr>
</table>

Then append the value <i>H</i> - 1 as a 5 bit unsigned integer. Next append a single 0 bit, which
is reserved for future use.

Next the nodes are encoded into the bit string by traversing the nodes of the <i>T</i> in level
order and appending the value for each non-zero node to the bit string. If all of the set values
covered by a node's interval are present within set <i>S</i>, then that node can instead be encoded
in the bit string as <i>B</i> bits all set to zero. All children of that node must not be encoded.

Lastly the bit string is converted into a ByteString by converting each consecutive group of 8 bits
into the next byte of the string.
If the number of bits in the bit string is not a multiple of 8, zero bits are appended to the
next multiple of 8.
The bit with the smallest index in the bit string is the least
significant bit in the byte and the bit with the largest index is the most significant bit.

<div class=example>
  The set {2, 33, 323} in a tree with a branching factor of 8 is encoded as the bit string:

  ```
  BitString:
  |- header |- lvl 0 |---- level 1 ----|------- level 2 -----------|
  |         |   n0   |   n1       n2   |   n3       n4       n5    |
  [ 01010000 10000100 10001000 10000000 00100000 01000000 00010000 ]

  Which then becomes the ByteString:
  [
    0b00001010,
    0b00100001,
    0b00010001,
    0b00000001,
    0b00000100,
    0b00000010,
    0b00001000
  ]
  ```

  First determine the height of the tree:

  <i>H</i> = ceil(log<sub>8</sub>(323 + 1)) = 3

  Then append

  *  branching factor = 8 = 10
  *  <i>H</i> - 1 = 2 = 00010
  *  reserved bit = 0

  Level 0:

  * root node, n<sub>0</sub> append 00100001. Bit 0 is set because there are set members in the interval
     [0, 64), and bit 5 is set due to members in the interval [320, 384).

  Level 1:

  * There will be two non-zero children corresponding to bit 0 and bit 5 in n<sub>0</sub>:
  * n<sub>1</sub> append 00010001. It is child 0 of n<sub>0</sub> and subdivides the interval
     [0, 64). Bit 0 is set since there are set members in [0, 8) and bit 4 for [32, 40).

  * n<sub>2</sub> append 00000001. It is child 5 of n<sub>0</sub> it subdivides the interval
     [320, 384). Bit 0 is set since there are set members in [320 - 328).

  Level 2:

  * n<sub>3</sub> append 00000100. Child 0 of n<sub>1</sub>, bit 2 is set for the interval [2, 3) or 2.
  * n<sub>4</sub> append 00000010. Child 4 of n<sub>1</sub>, bit 1 is set for the interval [33, 34) or 33.
  * n<sub>5</sub> append 00001000. Child 0 of n<sub>2</sub>, bit 3 is set for the interval [323, 324)
     or 323.

</div>

<div class=example>
  The set {} in a tree with a branching factor of 4 is encoded as the bit string:

  ```
  BitString:
  |- header- |
  |          |
  [ 00000000 ]

  Which then becomes the ByteString:
  [
    0b00000000,
  ]
  ```

  First determine the height of the tree. Because we are encoding an empty
  set height is:

  <i>H</i> = 1

  Then append

  *  branching factor = 2 = 00
  *  <i>H</i> - 1 = 0 = 00000
  *  reserved bit = 0

  Empty sets have no nodes, so no bytes beyond the header need to be appended.

</div>

<div class=example>
  The set {0, 1, 2, ..., 17} can be encoded with a branching factor of 4 as:

  ```
  BitString:
  |- header | l0 |- lvl 1 -| l2  |
  |         | n0 | n1 | n2 | n3  |
  [ 10010000 1100 0000 1000 1100 ]

  ByteString:
  [
    0b00001001,
    0b00000011,
    0b00110001
  ]
  ```

  First determine the height of the tree:

  <i>H</i> = ceil(log<sub>4</sub>(17 + 1)) = 3

  Then append

  *  branching factor = 4 = 01
  *  <i>H</i> - 1 = 2 = 00010
  *  reserved bit = 0

  Level 0:
  *  n<sub>0</sub> append 0011. Bit 0 set for [0, 16), bit 1 set for [16, 32)

  Level 1:
  *  n<sub>1</sub> append 0000. All bits zero to indicate interval [0, 16) is fully filled.
  *  n<sub>2</sub> append 0001. Bit 0 set for [16, 20)

  Level 2:
  *  n<sub>3</sub> append 0011. Bit 0 set for value 16, bit 1 set for value 17.

</div>

### IntegerList ### {#integerlist}

A data structure which compactly represents a list of non-negative integers
from 0 to 2<sup>31</sup>-1. The list is encoded into a ByteString for transport.

There are three steps of encoding/compression: first delta, second zig-zag, and finally UIntBase128.
The final ByteString result is simply the concatenation of the individual UIntBase128
encoded bytes.

IntegerList encoding must reject an input list which contains values not in the range
0 to 2<sup>31</sup>-1. Likewise if decoding an IntegerList results in values which are not
in the range 0 to 2<sup>31</sup>-1 the list is invalid and must be rejected.

#### Delta Encoding #### {#integerlist-deltas}

Delta encoding converts a list of integers to a list of deltas between them.

A list L of n integers L<sub>i<sub>0..n-1</sub></sub> is converted into a list
of N integers D<sub>i<sub>0..n-1</sub></sub> as follows:

* D<sub>0</sub> = L<sub>0</sub>
* D<sub>i = 1..n-1</sub> = L<sub>i</sub> - L<sub>i-1<sub>

This has the effect of reducing the magnitude of the values, which reduces the number
of bytes required in the UIntBase128 encoding, below.

<div class="example">
```
// Note: unsorted
int_list = [23, 43, 12, 3, 67, 68, 69, 0]
delta_list = [23, 20, -31, -9, 64, 1, 1, -69]
```
</div>

#### Zig-Zag Encoding #### {#integerlist-zigzag}

Zig-Zag encoding reversibly converts signed integers to unsigned integers,
using the same number of bits. The entire range of values is supported.
This step is required, as the [[#integerlist-uintbase128]] step works on
unsigned integers only. The encoding maps positive integer values to even positive integers and
negative integer values to odd positive integers. Psuedo code:

```
encode(n):
  if n >= 0:
    return n * 2
  else:
    return (n * -2) - 1

decode(n) {
  if n & 1:
    return -((n + 1) / 2)
  else:
    return n / 2
```

<div class="example">
<table>
<tr><th>Value</th><th>Zig-Zag Encoding</th></tr>
<tr><td>0</td><td>0</td></tr>
<tr><td>1</td><td>2</td></tr>
<tr><td>2</td><td>4</td></tr>
<tr><td>3</td><td>6</td></tr>
<tr><td>4</td><td>8</td></tr>
<tr><td>-1</td><td>1</td></tr>
<tr><td>-2</td><td>3</td></tr>
<tr><td>-3</td><td>5</td></tr>
<tr><td>-4</td><td>7</td></tr>
</table>
</div>

<div class="example">
```
delta_list = [23, 20, -31, -9, 64, 1, 1, -69]
zig_zag_encoded_list = [46, 40, 61, 17, 128, 2, 2, 137]
```
</div>

#### UIntBase128 Encoding #### {#integerlist-uintbase128}

UIntBase128 is a variable length encoding of unsigned integers,
suitable for values up to 2<sup>32</sup>-1. A UIntBase128 encoded number
is a sequence of bytes for which the most significant bit is set for all but
the last byte, and clear for the last byte. The number itself is base 128
encoded in the lower 7 bits of each byte. Thus, a decoding procedure for
a UIntBase128 is: start with value = 0. Consume a byte, setting value =
old value times 128 + (byte bitwise-and 127). Repeat last step until
the most significant bit of byte is false.

UIntBase128 encoding format allows a possibility of sub-optimal encoding, where e.g.
the same numerical value can be represented with variable number of bytes (utilizing
leading zeros). For example, the value 63 could be encoded as either one byte 0x3F
or two (or more) bytes: [0x80, 0x3f]. An encoder must not allow this to happen and
*MUST* produce shortest possible encoding. A decoder *MUST* reject the font file
if it encounters a UIntBase128-encoded value with
leading zeros (a value that starts with the byte 0x80), if UIntBase128-encoded
sequence is longer than 5 bytes, or if a UIntBase128-encoded value exceeds
2<sup>32</sup>-1. Pseudo-code:

```
bool ReadUIntBase128( data, *result ) {
  UInt32 accum = 0;

  for (i = 0; i < 5; i++) {
    UInt8 data_byte = data.getNextUInt8();

    // No leading 0's
    if (i == 0 && data_byte == 0x80) return false;

    // If any of top 7 bits are set then << 7 would overflow
    if (accum & 0xFE000000) return false;

    *accum = (accum << 7) | (data_byte & 0x7F);

    // Spin until most significant bit of data byte is false
    if ((data_byte & 0x80) == 0) {
      *result = accum;
      return true;
    }
  }
  // UIntBase128 sequence exceeds 5 bytes
  return false;
}
```

<div class="example">
```
Value       Output Bytes
0           00000000
1           00000001
2           00000010
3           00000011
127         01111111
128         10000001 00000000
255         10000001 01111111
16256       11111111 00000000
2080768     11111111 10000000 00000000
266338304   11111111 10000000 10000000 00000000
4294967295  10001111 11111111 11111111 11111111 01111111
```
</div>

<div class="example">
```
zig_zag_encoded_list = [46, 40, 61, 17, 128, 2, 2, 137]
bytes = [2E 28 3D 11 81 00 02 02 81 09]
         └┘ └┘ └┘ └┘ └───┘ └┘ └┘ └───┘
```
</div>


### SortedIntegerList ### {#sortedintegerlist}

A data structure which compactly represents a sorted list of ascending non-negative integers
(0 to 2<sup>32</sup>-1). The list is encoded into a ByteString for transport.

This is a variation on IntegerList with better compression. Sorted lists only use two steps of
encoding/compression: first deltas and then UIntBase128. The [[#integerlist-zigzag]] step is skipped.
This allows twice the range in UIntBase128, so that single bytes may be used more often.

SortedIntegerList encoding must reject an input list which contains values not in the range
0 to 2<sup>32</sup>-1. Likewise if decoding an IntegerList results in values which are not
in the range 0 to 2<sup>32</sup>-1 the list is invalid and must be rejected.

### RangeList ### {#rangelist}

A RangeList encodes a set of non-negative integers (0 to 2<sup>32</sup>-1). The set is encoded as a
list of disjoint intervals. Each interval is represented by two integers, a
start (inclusive) and end (inclusive).

A RangeList is a list of n pairs
[min<sub>i<sub>0..n-1</sub></sub>, max<sub>i<sub>0..n-1</sub></sub>].
The list must be non-decreasing, i.e. min<sub>i=1..n-1</sub> >= max<sub>i-1<sub>.

To encode this list, we convert it to a list L of 2n integers, where
L<sub>2i</sub> = min<sub>i</sub> and L<sub>2i+1</sub> = max<sub>i</sub> for
i = 0..n-1.

L is a sorted list of integers, so [[#sortedintegerlist]] is used to encode it as a
ByteString.

<div class="example">
```
range_list = [3, 10], [13, 268]
int_list = [3, 10, 13, 268]
delta_list = [3, 7, 3, 255]
bytes = [03 07 03 81 7F]
```
</div>

### AxisSpace ### {#AxisSpace}

Stores a set of intervals on one or more open type variation axes [[opentype-variations]]</a>.
Encoded as a CBOR map (major type 5). The key in each pair is an
<a href="https://docs.microsoft.com/en-us/typography/opentype/spec/fvar#variationaxisrecord">
axis tag</a>. It is encoded as a ByteString containing exactly 4 ASCII characters. The value in each
pair is an <code>ArrayOf&lt;AxisInterval&gt;</code> [[#AxisInterval]]. The list of intervals for a
distinct axis tag must be disjoint.

### Objects ### {#objects}

Objects are data structures comprised of key and value pairs.
<span class="conform server client" id="conform-object">Objects are encoded via CBOR as maps (major
type 5)</span>. Each key and value pair is encoded as a single map entry. Keys are always unsigned
integers and are encoded using major type 0. Values are encoded using the encoding specified by the
type of the value.

All fields in an object are optional and do not need to have an associated value. Conversely when
decoding and object fields may be present which are not specified in the schema. The decoder must
ignore without error any key and value pairs where the key is not recognized.

There are several types of object used, each type is defined by a schema in [[#schemas]]. The schema
for a type specifies for each field:

*  A human readable name for the field. For reference only, not used in the encoding.
*  A unsigned integer id for the field. This is used as the key in the encoding.
*  The type of the value stored in this field. Can be any of the types defined in [[#data-types]]
    including object types.

## Object Schemas ## {#schemas}

### CompressedSet ### {#CompressedSet}

Encodes a set of unsigned integers. The set is not ordered and does not
allow duplicates. Members of the set are encoded into either a SparseBitSet or a
RangeList. To obtain the final set the members of the sparse
bit set and the list of ranges are unioned together.

<table>
  <tr><th>ID&nbsp;</th><th>Field Name</th><th>Type</th></tr>
  <tr><td>0</td><td>sparse_bit_set</td><td>SparseBitSet (ByteString)</td></tr>
  <tr><td>1</td><td>range_deltas</td><td>RangeList (ByteString)</td></tr>
</table>

### AxisInterval ### {#AxisInterval}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>start</td><td>Float</td></tr>
  <tr><td>1</td><td>end</td><td>Float</td></tr>
</table>

<code>AxisInterval</code> defines an interval (from <code>start</code> to <code>end</code> inclusive)
on some variable axis in a font.

For an <code>AxisInterval</code> object to be well formed:

*  <code>start</code> must be set.

*  <code>end</code> is optional, must be greater than <code>start</code>. If <code>end</code> is not set
    then this interval is a single point, <code>start</code>.

### PatchRequest ### {#PatchRequest}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>protocol_version</td><td>ProtocolVersion (Integer)</td></tr>
  <tr><td>1</td><td>accept_patch_format</td><td>ArrayOf&ltInteger&gt;</td></tr>
  <tr><td>2</td><td>codepoints_have</td><td>CompressedSet</td></tr>
  <tr><td>3</td><td>codepoints_needed</td><td>CompressedSet</td></tr>
  <tr><td>4</td><td>indices_have</td><td>CompressedSet</td></tr>
  <tr><td>5</td><td>indices_needed</td><td>CompressedSet</td></tr>
  <tr><td>6</td><td>axis_space_have</td><td>AxisSpace</td></tr>
  <tr><td>7</td><td>axis_space_needed</td><td>AxisSpace</td></tr>
  <tr><td>8</td><td>ordering_checksum</td><td>Integer</td></tr>
  <tr><td>9</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>10</td><td>base_checksum</td><td>Integer</td></tr>
</table>

For a PatchRequest object to be well formed:

*  <code>protocol_version</code> must be set to 0.
*  <code>accept_patch_format</code> can include any of the values listed in [[#patch-formats]].
*  If either of <code>indices_have</code> or <code>indices_needed</code> is set to a non-empty set
    then <code>ordering_checksum</code> must be set.
*  If <code>codepoints_have</code> or <code>indices_have</code> is set to a non-empty set then
    <code>original_font_checksum</code> and <code>base_checksum</code> must be set.

### PatchResponse ### {#PatchResponse}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>protocol_version</td><td>ProtocolVersion (Integer)</td>
  <tr><td>1</td><td>patch_format</td><td>Integer</td></tr>
  <tr><td>2</td><td>patch</td><td>ByteString</td></tr>
  <tr><td>3</td><td>replacement</td><td>ByteString</td></tr>
  <tr><td>4</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>5</td><td>patched_checksum</td><td>Integer</td></tr>
  <tr><td>6</td><td>codepoint_ordering</td><td>IntegerList</td></tr>
  <tr><td>7</td><td>ordering_checksum</td><td>Integer</td></tr>
  <tr><td>8</td><td>subset_axis_space</td><td>ArrayOf&lt;AxisInterval&gt;</td></tr>
  <tr><td>9</td><td>original_axis_space</td><td>ArrayOf&lt;AxisInterval&gt;</td></tr>
</table>

For a PatchResponse object to be well formed:
*  <span class="conform server" id="conform-response-protocol-version">
     <code>protocol_version</code> must be set to 0.</span>
*  <span class="conform server" id="conform-response-valid-format">
     <code>patch_format</code> must be one of the values listed in [[#patch-formats]].</span>
*  <span class="conform server" id="conform-response-patch-or-replacement">
     Only one of <code>patch</code> or <code>replacement</code> must be set.</span>
*  <span class="conform server" id="conform-response-font-checksums">
     If either <code>patch</code> or <code>replacement</code> is set then <code>patch_format</code>,
     <code>patched_checksum</code>, and <code>original_font_checksum</code> must be set.</span>
*  <span class="conform server" id="conform-response-ordering-checksum">
     If <code>codepoint_ordering</code> is set then <code>ordering_checksum</code> must be set.</span>

Client {#client}
----------------

### Client State ### {#client-state}

The client will need to maintain at minimum the following state for each font file being incrementally
transferred:

*  Font subset: a byte array containing the binary data for the most recent version of the subset of
    the font being incrementally transferred. For a new font this is initialized to empty byte array.
*  Original font checksum: the most recent value of
    <a href="#PatchResponse"><code>PatchResponse.original_font_checksum</code></a> received
    from the server for this font.

*  Codepoint Reordering Map: The most recent [[#codepoint-reordering]] received from the server
    for this font.

*  Codepoint Reordering Checksum: The most recent
    <a href="#PatchResponse"><code>PatchResponse.ordering_checksum</code></a>
    for this font.

*  Original Font Axis Space: the variations axis space that the original font covers. Supplied
    by <a href="#PatchResponse"><code>PatchResponse.original_axis_space</code></a>.

*  Subset Axis Space: the most recent variations axis space that the subsetted font covers. Supplied by
    <a href="#PatchResponse"><code>PatchResponse.subset_axis_space</code></a>.

### Extending the Font Subset ### {#extend-subset}

A client extends its font subset to cover additional codepoints by making requests to a Patch Subset
server. The request requirements are described here in terms of a fetch according to
[[fetch#fetching]]. If the implementing user agent does not support fetch, then the request
should be made using an equivalent HTTP request.

* The request [=request/method=] must be either "GET" or "POST".

* The request [=request/destination=] must be "font".

* The request CORS [=request/mode=] must be "cors".

* The request URL [=url/scheme=] must be "https".

* The request URL [=url/path=] is used to identify the font specific to be loaded.

* If [=request/method=] is "POST" then, request [=request/body=] must be a single
    <a href="#PatchRequest"><code>PatchRequest</code></a> object encoded via CBOR.

* Otherwise if [=request/method=] is "GET" then, URL [=url/query=] must contain a
    parameter "request" whose value is a single <a href="#PatchRequest"><code>PatchRequest</code></a>
    object encoded via CBOR and then base64url encoding [[rfc4648]].

Any request and/or url parameters which are not specified here should be set based on
the user agent's normal handling for font requests. For example if this font load is
from a CSS font face, then [[css-fonts-4#font-fetching-requirements]] should be followed.

The fields of the <a href="#PatchRequest"><code>PatchRequest</code></a> object should be set
as follows:

*  <code>protocol_version</code>: set to 0.

*  <code>accept_patch_format</code>: set to the list of [[#patch-formats]] that this client is
    capable of decoding. Must contain at least one format.

*  <code>codepoints_have</code>: set to exactly the set of codepoints that the current font subset
    contains data for. If the current font subset is an empty byte array this field is left unset.
    If the client has a codepoint ordering for this font then this field should not be set.

*  <code>codepoints_needed</code>: set to the set of codepoints that the client wants to
    add to its font subset. If the client has a codepoint ordering for this font then this
    field should not be set.

*  <code>indices_have</code>: encodes the set of additional codepoints that the current
    font subset contains data for. The codepoint values are transformed to indices by applying
    [[#codepoint-reordering]] to each codepoint value. If the client does not have a codepoint
    ordering for this font then this field should not be set.

*  <code>indices_needed</code>: encodes the set of codepoints that the client wants to add to its
    font subset. The codepoint values are transformed to indices by applying
    [[#codepoint-reordering]] to each codepoint value. If the client does not have a codepoint
    ordering for this font then this field should not be set.

*  <code>axis_space_have</code>: set to the current value of <code>subset_axis_space</code>
    saved in the state for this font.

*  <code>axis_space_needed</code>: set to the intervals of each variable axis in the original
    font that the client wants to add to its font subset. If the client wants an entire axis
    from the original font then that axis should not be listed.

*  <code>ordering_checksum</code>: If either of <code>indices_have</code> or
    <code>indices_needed</code> is set then this must be set to the current value of
    <code>ordering_checksum</code> saved in the state for this font.

*  <code>original_font_checksum</code>:
    Set to saved value for <code>original_font_checksum</code> in the state for this font. If
    there is no saved value leave this field unset.

*  <code>base_checksum</code>:
    Set to the checksum of the font subset byte array saved in the state for this font. See:
    [[#computing-checksums]].


Note: It is allowed for the client to request more codepoints then it strictly needs. For
example, on slower connections it may be more performant to request extra codepoints if
that is likely to prevent a future request from needing to be sent.


### Handling PatchResponse ### {#handling-patch-response}

If a server is able to succsessfully process a <a href="#PatchRequest"><code>PatchRequest</code></a>
it will respond with HTTP [=response/status=] code 200 and the [=response/body=] of the response will
be a 4 byte magic number (0x49, 0x46, 0x54, 0x20) followed by a single
<a href="#PatchResponse"><code>PatchResponse</code></a> object encoded via CBOR. The client
should interpret and process the fields of the object as follows:

1.  If field <code>replacement</code> is set then: the byte array in this field is a binary patch
     in the format specified by <code>patch_format</code>. Apply the binary patch to a base which
     is an empty byte array. Replace the saved font subset with the result of the patch application.

2. If field <code>patch</code> is set then:  the byte array in this field is a binary patch
    in the format specified by <code>patch_format</code>. Apply the binary patch to the saved font
    subset. Replace the saved font subset with the result of the patch application.

3. If either <code>replacement</code> or <code>patch</code> is set then:
    <a href="#computing-checksums">compute the checksum</a> of the font subset produced by the patch
    application in steps 1 or 2. If the computed checksum is not equal to <code>patched_checksum</code>
    this is a recoverable error. Follow the procedure in [[#client-side-checksum-mismatch]]. Otherwise
    update the saved original font checksum with the value in <code>original_font_checksum</code>.

4. If fields <code>codepoint_ordering</code> and <code>ordering_checksum</code> are set then update
    the saved codepoint ordering and checksum with the new values specified by these two fields.
    If neither <code>replacement</code> nor <code>patch</code> are set, then the client should
    resend the request that triggered this response but use the new codepoint ordering provided in
    this response.

5. If <code>original_axis_space</code> is set then update the saved original axis space with the value
    specified in this field.

6. If <code>subset_axis_space</code> is set then update the saved subset axis space with the value
    specified in this field.

### Handling Invalid Response from the Server ### {#invalid-server-response}


If the response a client receives from the server has a [=response/status=] code other than 200:

*  If it is a redirect [=status=]: follow normal redirect handling, such as
     [[fetch#http-redirect-fetch]].

*  All other statuses, the font subset extension has failed. Follow [[#font-load-failed]].

If the response the client receives has a [=response/status=] code of 200, but the [=response/body=]
is malformed. That is, it is missing the magic number, not decodable with CBOR, or the
<a href="#PatchResponse"><code>PatchResponse</code></a> is not well formed:

*  This is an error. Follow [[#font-load-failed]].

### Client Side Checksum Mismatch ### {#client-side-checksum-mismatch}

If the checksum of the font subset computed by the client does not match the
<code>patched_checksum</code> in the server's response then the client should:

1. Discard all currently saved state for this font.

2. <a href="#extend-subset">Resend the request</a>. Set the <code>codepoints_needed</code> field
    to the union of the codepoints in the discarded font subset and the set of code points
    that the previous request was trying to add.

    If the resent request also results in a checksum mismatch then this is an error. The client
    must not resend the request again and should follow [[#font-load-failed]]

### Font Load Failed ### {#font-load-failed}

If the font load or extension has failed the client should choose one of the following options:

1.  If the client has a saved font subset, it may choose to use that and then use the user
      agent's existing font fallback mechanism for codepoints not covered by the subset.

2.  The client may re-issue the request as a regular non incremental font fetch to the same
      [=url/path=]. It must not include the patch subset request parameter. This will load
      the entire original font.

3.  Discard the saved font subset, and use the user agent's existing font fallback mechanism.

Regardless of which of the above options are used, the saved client state for this font must be
discarded.

Server: Responding to a PatchRequest {#handling-patch-request}
--------------------------------------------------------------

<span class="conform server" id="conform-successful-response">If the server receives a well formed
<a href="#PatchRequest"><code>PatchRequest</code></a> over HTTPS for a font the server has and that was
populated according to the requirements in [[#extend-subset]] then it must respond with HTTP
[=response/status=] code 200.</span>
<span class="conform server" id="conform-magic-number">The first 4 bytes of the response
[=response/body=] must be set to 0x49, 0x46, 0x54, 0x20 ("IFT " encoded as ASCII) followed by a
single <a href="#PatchRequest"><code>PatchResponse</code></a> object encoded via CBOR.</span>

The [=url/path=] in the request [=request/url=] identifies the specific font that a patch is desired
for. From the request object the server can produce two codepoint sets:

1.  Codepoints the client has: formed by the union of the codepoint sets specified by
     <code>codepoints_have</code> and <code>indices_have</code>. The indices in
     <code>indices_have</code> must be mapped to codepoints by the application of the
     codepoint reordering with a checksum matching <code>ordering_checksum</code>.

2.  Codepoints the client needs: formed by the union of the codepoint sets specified by
     <code>codepoints_needed</code> and <code>indices_needed</code>. The indices in
     <code>indices_needed</code> must be mapped to codepoints by the application of the
     codepoint reordering with a checksum matching <code>ordering_checksum</code>.

Likewise, the server can produce two variable axis spaces:

1.  Axis space the client has: provided by <code>axis_space_have</code>. If any axes in the font are
     not specified in <code>axis_space_have</code> then for those axes add their entire interval
     from the original font.

2. Axis space the client needs: provided by <code>axis_space_needed</code>. If any axes in the font are
     not specified in <code>axis_space_needed</code> then for those axes add their entire interval
     from the original font.

If the server does not recognize the codepoint ordering used by the client, it must respond
with a response that will cause the client to update it's codepoint ordering to one the server
will recognize via the process described in [[#handling-patch-response]] and not include any patch.
That is the <code>patch</code> and <code>replacement</code> fields must not be set.

<span class="conform server" id="conform-response-valid-patch">
Otherwise when the response is applied by the client following the process in
[[#handling-patch-response]] to a font subset with checksum <code>base_checksum</code> it must result
in an extended font subset:
</span>

*  <span class="conform server" id="conform-response-subset">That contains data for at least the union
    of the set of codepoints needed and the sets of codepoints the client already has.</span>

*  That contains a variation axis space that covers at least the union of the axis space the client
    has and the axis space the client needs.

Additionally:

*  <span class="conform server" id="conform-response-patch-format">The format of the patch in the
    either the <code>patch</code> or <code>replace</code> fields must be one of those listed in
    <code>accept_patch_format</code></span>.

*  <span class="conform server" id="conform-response-original-checksum">The value of
    <code>original_font_checksum</code> must be set to the checksum of the original font.
    The checksum value must computed by the procedure in [[#computing-checksums]].</psan>

*  <span class="conform server" id="conform-response-patched-checksum">
     If <code>patch</code> or <code>replacement</code> fields are set the value of
     <code>patched_checksum</code> must be set to the checksum of the extended font subset.
     The checksum value must computed by the procedure in [[#computing-checksums]].</span>

*  If the set of codepoints the client has is empty the response must set the
    <code>codepoint_ordering</code> and <code>ordering_checksum</code> fields following
    [[#codepoint-reordering]].

*  If the set of codepoints the client has is empty and the original font has variation axes, the
    response must set the <code>original_axis_space</code> fields to the axis space covered by
    the original font.

*  If <code>patch</code> or <code>replacement</code> fields are set and the original font has
    variation axes, the response must set the <code>subset_axis_space</code> field to the axis space
    covered by the font subset.

*  If <code>accept_patch_format</code> contains any unrecognized patch formats the server should
    ignore the unrecognized ones.

Note: the server can respond with either a patch or a replacement but should try to produce a patch
where possible. Replacement's should only be used in situations where the server is unable to recreate
the client's state in order to generate a patch against it.

Note: if a patch subset service is composed of more than one server task and some subset of those
tasks are using a subsetter version which produces different binary results than the rest, there is
a risk that consecutive extend requests may result in unnecessary replacement responses. For example if
consecutive requests alternate between server backends with different subsetters, then each response
will be a replacement as the server tasks will be unable to recreate the previously generated
subset. This scenario might occur during software updates to the server tasks. To combat this
it's recommended that sticky load balancing is used which aims to send consecutive requests from the
same client to the same server task.

Possible error responses:

*  If the request is malformed the server must instead respond with http [=response/status=] code 400
     to indicate an error.

*  If the requested font is not recognized by the server it should respond with http [=response/status=]
     code 404 to indicate a not found error.

### Range Request Support ### {#range-request-support}

A patch subset support server must also support incremental transfer via [[#range-request-incxfer]].
To support range request incremental tranfser the patch subset server must support HTTP range requests
[[!RFC7233]] against the font files it provides via patch subset.


Computing Checksums {#computing-checksums}
------------------------------------------

64 bit checksums of byte strings are computed using the
[[!fast-hash]] algorithm. A python like pseudo
code version of the algorithm is presented below:

```
# Constant values come fast hash: https://github.com/ztanml/fast-hash
SEED = 0x11743e80f437ffe6
M = 0x880355f21e6d1965

mix(value):
  value = value ^ (value >> 23)
  value = value * 0x2127599bf4325c37
  value = value ^ (value >> 47)
  return value

fast_hash(byte[] data):
  # When casting byte arrays into unsigned 64 bit integers the bytes are in little
  # endian order. That is the smallest index is the least significant byte.
  uint64 hash = SEED ^ (length(data) * M)
  for (i = 0; i <= length(data) - 8; i += 8)
    hash = (hash ^ mix((uint64) data[i:i+8])) * M

  remaining = length(data) % 8
  if not remaining:
    return mix(hash)

  uint64 last_value = (uint64) concat(data[length(data) - remaining:],
                                      [0] * (8 - remaining))
  return mix((hash ^ mix(last_value)) * M)
```

To ensure checksums are consistent across all platforms, all integers during the computation must be
in little endian order.

Note: a C implementation of fast hash can be found here: [[!fast-hash]]

<div class=example>

<table>
  <tr><th>Bytes</th><th>Checksum value</th></tr>
  <tr>
    <td>0f 7b 5a e5</td>
    <td>0xe5e0d1dc89eaa189</td>
  </tr>
  <tr>
  <td>1d f4 02 5e d3 b8 43 21 3b ae de</td>
  <td>0xb31e9c70768205fb</td>
  </tr>
</table>

</div>

Codepoint Reordering {#codepoint-reordering}
--------------------------------------------

A codepoint reordering for a font defines a function which maps unicode codepoint values from the
font to a continuous space of [0, number of codepoints in the font). This transformation is intended
to reduce the cost of representing codepoint sets.

A codepoint ordering is encoded into a <code>CompressedList</code>. The list must contain all unicode
codepoints that are supported by the font. The index of a particular unicode codepoint in the list is
the new value for that codepoint.

A server is free to choose any codepoint ordering, but should try to pick one that will minimize the
size of encoded codepoint sets for that font.

### Codepoint Reordering Checksum ### {#reordering-checksum}

A checksum of a codepoint reordering can be computed as follows:

```
SEED = 0x11743e80f437ffe6
M = 0x880355f21e6d1965

mix(value):
  value = value ^ (value >> 23)
  value = value * 0x2127599bf4325c37
  value = value ^ (value >> 47)
  return value

fast_hash_ordering(uint64[] ordering):
  uint64 hash = SEED ^ (length(ordering) * 8 * M)
  for i in ordering:
    hash = (hash ^ mix(ordering[i])) * M

  return mix(hash)
```

To ensure checksums are consistent across all platforms, all integers during the computation must be
in little endian order.

<div class=example>

<table>
  <tr><th>Codepoint Ordering</th><th>Checksum value</th></tr>
  <tr>
    <td>[106, 97, 105, 120, 100]</td>
    <td>0x6986dc19f4e621e</td>
  </tr>
</table>

</div>

Patch Formats {#patch-formats}
------------------------------

The following patch formats may be used by the server to create binary diffs between a source file
and a target file:

<table>
  <tr>
    <th>Format</th><th>Value</th><th>Notes</th>
  </tr>
  <tr>
    <td>VCDIFF</td><td>0</td>
    <td>Uses VCDIFF format [[!RFC3284]] to produce the patch. All client and server implementations
    must support this format.</td>
  </tr>
  <tr>
    <td>Brotli Shared Dictionary</td><td>1</td>
    <td>Uses brotli compression [[!RFC7932]] to produce the patch. The source file is used as a shared
    dictionary
    [[!Shared-Brotli]] given to the brotli compressor and decompressor.</td>
  </tr>
</table>


Range Request Incremental Transfer {#range-request-incxfer}
===========================================================

<em>This section is not normative.</em>

The Range Request method is a very simple method of incremental transfer, and has no server-side requirements (other than the server should be able to respond to byte-based range requests). The browser simply makes range requests to the server for the specific bytes in the font file that it needs. In order to know which bytes are necessary, the browser makes one initial special request for the beginning of the file.

In order for the range request method to be as effective as possible, the font file itself should be internally arranged in a particular way, in order to decrease the number of requests the browser needs to make. Therefore, it is expected that web developers wishing to use the range request method will use font files that have had their contents already arranged optimally.

This method was modelled after video playback on the web, where seeking in a video causes the browser to send a range request to the server.

Font organization {#font-organization}
--------------------------------------

### Background ### {#font-organization-background}

<em>This section is not normative.</em>

A particular organization of font files is beneficial for improving the performance of the range-request IFT method. The range-request IFT method only works with [[!TRUETYPE]], [[!OPENTYPE]], [[!WOFF]], or [[!WOFF2]] files. All of these file formats use an <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/otff#organization-of-an-opentype-font"><code>sfnt</code> wrapper</a> which provides a directory of tables inside the font file. A <code>sfnt</code>-based font file is mainly composed of a collection of independent tables.

Issue: <a href="https://github.com/w3c/IFT/issues/59">Using WOFF2 files with range-request mechanism doesn't seem to be a viable option</a>

### Introduction ### {#font-organization-introduction}

The term <dfn>range-request optimized font</dfn> is used to describe a font file organized for use with the range-request IFT method. Optimizing a font for the range-request IFT method does not change the file format of the font.

Note: Because optimizing a font does not change its file format, no new additional tooling is necessary to interact with these optimized fonts. They are still valid fonts, but with a particular internal organization.

<div class=example>
The result of optimizing an OpenType font for the range-request IFT method is still a valid OpenType font. The resulting file may be larger (by byte count) than it was before optimizing it, but fewer of those bytes should be necessary for a client to download in order to render a target text.
</div>

Note: There are no <code>MUST</code>-level requirements on the organization of a [=range-request optimized font=]. Any arbitrary font file may be considered to be a [=range-request optimized font=]. However, additional optimizations should increase the performance of loading in a browser via the range-request IFT method. Font creators are encouraged to enact as many of the optimizations listed in this section as are reasonable for the fonts they create.

### Compression ### {#font-organization-compression}

Servers supporting the range-request IFT method should support compression via the [[!RFC7231]] <code>Content-Encoding</code> header or the [[!RFC7230]] <code>Transfer-Encoding</code> header, rather than having the font file itself be statically compressed.

A [=range-request optimized font=] file (the file itself) should not use any kind of compression other than [[!RFC7932]] (commonly referred to as "Brotli") compression.

If Brotli compression is used in a [=range-request optimized font=], it should use only one <a href="https://datatracker.ietf.org/doc/html/rfc7932#section-9.2">meta-block</a>.

If Brotli compression is used in a [=range-request optimized font=], its one meta-block should have the <a href="https://datatracker.ietf.org/doc/html/rfc7932#section-9.2"><code>ISUNCOMPRESSED</code></a> bit set to 1.

Issue: <a href="https://github.com/w3c/IFT/issues/60">Static file compression compatibility with range-request method</a>

### Table Ordering ### {#font-organization-table-ordering}

No two tables in a [=range-request optimized font=] should share a tag name.

A [=range-request optimized font=] should have only one of these tables:
- The <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/cff"><code>CFF</code></a> table
- The <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/cff2"><code>CFF2</code></a> table
- The <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/glyf"><code>glyf</code></a> table

The term <dfn>outline table</dfn> is used to describe the one table which is either a <code>CFF</code> table, <code>CFF2</code> table, or <code>glyf</code> table.

The [=outline table=] data in a [=range-request optimized font=] should lie at the end of the file.

If a <code>CFF</code> table exists, the <a href="https://wwwimages2.adobe.com/content/dam/acom/en/devnet/font/pdfs/5176.CFF.pdf">CharString</a> data should lie at the end of the <code>CFF</code> table.

If a <code>CFF2</code> table exists, the <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/cff2#charStrings">CharString</a> data should lie at the end of the <code>CFF2</code> table.

Issue: <a href="https://github.com/w3c/IFT/issues/28">Font Collections support</a>

### Glyph Independence ### {#font-organization-glyph-independence}

Note: The goal of this section is to make every glyph independent from each other.

A [=range-request optimized font=] should not use <a href="https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6glyf.html">Compound glyphs</a>.

Issue: <a href="https://github.com/w3c/IFT/issues/58">Supporting fonts with composite glyphs via range-request</a>

Note: Compound glyphs can be flattened by inlining their component glyphs to become additional contours.

A [=range-request optimized font=] should not use <a href="https://wwwimages2.adobe.com/content/dam/acom/en/devnet/font/pdfs/5176.CFF.pdf">Subroutines</a>.

Note: CFF glyph CharStrings can be flattened by inlining subroutines to become additional CharString bytes.

### Glyph Order ### {#font-organization-glyph-order}

Glyphs inside a [=range-request optimized font=] should be sorted in the file to keep glyphs often used in the same documents close together in the file.

Note: Putting the most frequently used glyphs together in the font increases the likelihood that the browser can download a contiguous sequence of necessary glyphs in a single range-request, thereby minimizing overhead.

Note: Reordering glyphs in a font is the same conceptual operation as renaming glyphs to have different glyph IDs. Therefore, this operation cannot be completed if glyph IDs must be preserved. Because glyph IDs are internal to text processing procedures and are not persisted, this requirement is not expected to be particularly burdensome.

One suggested method of sorting the glyphs in the file is by [=usage document frequency=] inside a relevant [=corpus=].

A <dfn>corpus</dfn> is defined to be a collection of documents, where a documents includes a collection of glyphs necessary to render some textual content.

Note: For a particular website, a corpus might be defined to be individual page loads of pages on that website.

The <dfn>usage document frequency</dfn> of a particular glyph inside a [=corpus=] is defined by the number of documents in the [=corpus=] which use that glyph, divided by the number of documents in the [=corpus=].

Note: This is distinct, but similar, to the number of times the glyph is used throughout the entire corpus.

The [=usage document frequency=] of the glyphs in a [=range-request optimized font=] should be decreasing throughout the font; that is, the most frequently used glyphs should have the lowest glyph IDs.

Note: Glyph ID 0 cannot be renamed in OpenType, TrueType, WOFF, and WOFF 2 fonts. All other glyphs can be renamed.

Note: Because the goal is simply to minimize overhead by placing similarly-used glyphs together, it may actually be possible to do better than ordering by simple frequency for a particular corpus. For example, some corpuses may have cliques of glyphs which have different frequencies but which nevertheless always seem to be used together.

A suggested ordering is included in <a href="#suggested-glyph-character-ordering">Appendix A</a> below.

Browser Behaviors {#browser-behaviors}
--------------------------------------

### First Request ### {#browser-behaviors-first-request}

When a browser encounters the CSS opt-in mechanism, it is instructed to use IFT to load the fonts. First, it follows the steps in the <a href="#method-selection">IFT method selection</a> section above. If those steps result in using the range-request method, the rest of this section applies.

The IFT method selection involves a single round-trip to the server, and if the range-request method is being used, the server's response starts sending the font file to the browser. The browser should start parsing the partial font data as it is being loaded from the server. The browser should not wait until the entire file has been received before parsing its contents.

There is a certain amount of data from the beginning of the font file which the browser should unconditionally download. The boundary at the end of this data is called the <dfn>range-request threshold</dfn>.

Note: The first request does not have to be a range request. If the browser expects the [=range-request threshold=] to lie within the first <code>n</code> bytes of the font, the first request may be a range request for the first <code>n</code> bytes of the font. However, a browser may instead make a non-range request, parse the data as it is being streamed from the server, and discover that it has reached the [=range-request threshold=] while data is still being streamed.

Once all the data before the [=range-request threshold=] has been loaded by the browser, the browser may either close this connection to the server, or it may choose to leave the connection open and let the font data continue loading in the background.

A browser may choose to add a [[!RFC7233]] <code>Range</code> header to the initial request during the IFT method selection if it has reason to believe the range it requests will be large enough and it prefers to not close this connection to the server.

Note: Different browsers may choose different [=range-request thresholds=]. Some browsers may treat this threshold as occuring at the end of the <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/otff#table-directory">sfnt tableDirectory</a>. Other browsers may treat this threshold as occurring just before any outline data, provided the outline data appears at the end of the font. Other browsers may place this threshold at the very beginning of the file, thereby treating the whole file as able to be downloaded with range-requests.

### Subsequent Requests ### {#browser-behaviors-subsequent-requests}

After all the data before the [=range-request threshold=] has been loaded by the browser, the browser will determine which additional byte ranges in the file are necessary to load. It will then issue [[!RFC7233]] HTTP Range Requests for at least those ranges.

Note: Browsers are encouraged to coalesce range requests for nearby areas of the file, to minimize the amount of range-request overhead required. Browsers are encouraged to inform these coalescing decisions from network configuration parameters and bandwidth / latency observations.

Note: If the font file has followed all of the organization guidelines above, all information required for laying out content and performing shaping will lie before any of the outline data in the file, and every glyph's outline will be independent from every other glyph. Therefore, the browser can treat the [=range-request threshold=] as being just before outline data begins, and once it has loaded up to that threshold, it can lay out page content. After laying out the page, downloading all the necessary outlines can be done with a collection of independent and parallel range requests. This works particularly well for Chinese, Japanese, and Korean fonts, where 90% or more of the font data is outline data.

Note: Another valid alternative is to treat the entire font as residing on an asynchronous virtual filesystem, and have the browser track which ranges of the font it ended up reading during its normal operation. The browser could then request those regions in range requests.

Server Behaviors {#server-behaviors}
------------------------------------

Servers supporting the range-request IFT method must support [[!RFC7233]] range requests.

Servers supporting the range-request IFT method should support compression via the [[!RFC7231]] <code>Content-Encoding</code> header or the [[!RFC7230]] <code>Transfer-Encoding</code> header, rather than having the font file itself be statically compressed.

<h2 class=no-num id=priv>Privacy Considerations</h2>


<h3  id="content-inference-from-character-set">Content inference from character set</h3>

IFT exposes, to the server hosting a Web font, the set of characters that the browser can already render in a given Web font, and also the set of characters that it cannot render, but wants to (for example, to render a new Web page). For details, see <a href="https://w3c.github.io/IFT/Overview.html#extend-subset">Extending the Font Subset</a>.

The purpose of doing so is to allow the server to compute a binary patch to the existing font, adding more characters. Thus, fonts are transferred incrementally, as needed, which <a href="https://www.w3.org/TR/PFE-evaluation/#analysis-cjk">greatly reduces</a>> the bytes transferred and the overall network cost..

For some languages, which use a very large character set (Chinese and Japanese are examples) the vast reduction in total bytes transferred means that Web fonts become usable, including on mobile networks, for the first time.

However, for those languages, it is <em>possible</em> that individual requests might be analyzed by a rogue font server to obtain intelligence about the type of content which is being read. It is unclear how feasible this attack is, or the computational complexity required to exploit it, unless the characters being requested are very unusual.

One mitigation, which was originally introduced for reasons of networking efficiency so is likely to be implemented in practice, is to request additional, un-needed characters to dilute the ability to infer what content the user is viewing. Requesting characters which are <a href="https://www.w3.org/TR/PFE-evaluation/#codepredict">statistically likely to occur</a> may <a href="https://docs.google.com/document/d/1u-05ztF9MqftHbMKB_KiqeUhZKiXNFE4TRSUWFAPXsk/edit">avoid a subsequent request</a>.

(IFT mandates HTTPS, so no in-the-middle attack is possible; the trust is between the client, and the server hosting the fonts).


<h3 id="checksum-and-possible-fingerprinting">Checksums and possible fingerprinting</h3>

64 bit checksums are generated and transferred between client and server. These are used for error detection, are not persistent across browsing sessions, change frequently in the course of a single browsing session, and thus should not pose a tracking risk.

Also, browsers typically cache resources keyed by the origin domain; thus the checksums and the set of characters the client requires would only be available to that domain and the patch subset server.

<h3 id="per-origin">Per-origin restriction avoids fingerprinting</h3>

  As required by [[!css-fonts-4]],
  Web Fonts <a href="https://drafts.csswg.org/css-fonts-4/#web-fonts">must not be accessible
  in any other Document from the one which either is associated with the @font-face rule
  or owns the FontFaceSet.
  Other applications on the device must not be able to access Web Fonts.</a>
  This avoids information leaking across origins.

  Similarly, font palette values
  <a href="https://drafts.csswg.org/css-fonts-4/#font-palette-values">must only be available to the documents that reference it</a>.
  Using an author-defined color palette outside of the documents that reference it
  would constitute a security leak since the contents of one page
  would be able to affect other pages,
  something an attacker could use as an attack vector.

<h2 class=no-num id=sec>Security Considerations</h2>

No Security issues have been raised against this document

<h2 id="suggested-glyph-character-ordering">
Appendix A: Suggested glyph/character ordering</h2>

Note: This section describes ordering of characters, not glyph IDs, because the meaning of glyph IDs are not consistent across different fonts. To optimize a particular font according to the ordering listed here, the characters will have to be mapped to glyph IDs inside the font. This approach of mapping characters to glyphs for ordering purposes works particularly well for ideographic languages with large character sets.

Issue: <a href="https://github.com/w3c/IFT/issues/61">Populate suggested character ordering for range-request method</a>
