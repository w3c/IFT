<pre class='metadata'>
Title: Incremental Font Transfer
Shortname: PFE
Status: w3c/ED
Group: webfontswg
Level: none
TR: https://www.w3.org/TR/example/
ED: https://w3c.github.io/IFT/Overview.html
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Editor: Garret Rieger, Google Inc., grieger@google.com
Abstract: TODO(garretrieger)
Status Text: initial draft is in progress.
</pre>

<!--
    for things that are not in specref
    https://www.specref.org/
-->
<pre class=biblio>
	{
		"PFE-report": {
            "href": "https://www.w3.org/TR/PFE-evaluation/",
            "authors": [
                "Chris Lilley"
                ],
            "status": "Note",
            "publisher": "W3C",
			"title": "Progressive Font Enrichment: Evaluation Report",
			"date": "15 October 2020"
		},
    "Shared-Brotli": {
      "href": "https://datatracker.ietf.org/doc/html/draft-vandevenne-shared-brotli-format-08",
      "authors": [
        "J. Alakuijala",
        "T. Duong",
        "R. Obryk",
        "Z. Szabadka",
        "L. Vandevenne"
        ],
        "status": "Internet Draft",
        "title": "Shared Brotli Compressed Data Format",
        "date": "27 Jul 2021"
    }
	}
</pre>

<pre class=biblio>
	{
	    "OpenType-Variations": {
            "href": "https://docs.microsoft.com/en-us/typography/opentype/spec/otvaroverview",
            "authors": [],
            "status": "Note",
            "publisher": "Microsoft",
			"title": "OpenType Font Variations Overview",
			"date": "23 October 2020"
		}
	}
</pre>
Introduction {#intro}
=====================

<em>This section is not normative.</em>

The success of WebFonts is unevenly distributed. This specification allows WebFonts to be used where
slow networks, very large fonts, or complex subsetting requirements currently preclude their use. For
example, even using WOFF 2 [[WOFF2]], fonts for CJK languages are too large to be practical.

See the Progressive Font Enrichment: Evaluation Report [[PFE-report]] for the investigation which led
to this specification.

There are two different methods which can be used to incrementally transfer fonts. The first method,
Patch Subset, uses a backend server which can generate binary patches to an existing font. The second
method, Range Request, utilizes HTTP range requests to load only the parts of the original font that
are needed.

The evaluation report found that patch subset was generally more efficient in terms of overall
performance and transferred bytes than range request. However, Range Request is simpler to deploy
for many uses cases while still providing material improvments to loading performance for large fonts
so it is included in this specification as an alternative method.

Patch Based Incremental Transfer {#patch-incxfer}
=================================================

Overview {#patch-overview}
--------------------------

In the patch subset approach to incremental font transfer a server generates binary patches which a
client applies to a subset of the font in order to extend the coverage of that font subset. The server
is stateless, it does not maintain any session data for clients between requests. Thus when a client
requests the generation of a patch from the server it must fully describe the current subset of the
font that it has in a way which allows the server to recreate it.

Generic binary patch algorithms are used which do not need to be aware of the specifics of the font
format. Typically a server will produce a patch by generating two font subsets: one which matches what
the client currently has and one which matches the extended subset the client desires. A binary patch
is then produced between the two subsets.

### Font Subset ### {#font-subset}

A subset of a font file is a modified version of the font that contains only the data needed to
render a subset of the codepoints in the original font. A subsetted font should be able to render
any combination of the codepoints in the subset identically to the original font.

Data Types {#data-types}
------------------------

This section lists all of the data types that are used to form the request and response messages
sent between the client and server.

### Encoding ### {#encoding}

All data types defined here are encoded into a byte representation for transport using CBOR
(Concise Binary Object Representation) [[!rfc8949]]. More information on how each data types
should be encoded by CBOR are given in the definition of those data types.

### Primitives ### {#primitives}

<table>
  <tr>
    <th>Data Type</th><th>Description</th><th>CBOR Major Type</th>
  </tr>
  <tr>
    <td>Integer</td><td>An integer value range [-2^64 - 1, 2^64 - 1] inclusive.</td>
    <td>0 or 1</td>
  </tr>
  <tr>
    <td>Float</td><td>IEEE 754 Single-Precision Float.</td><td>7</td>
  </tr>
  <tr>
    <td>ByteString</td><td>Variable number of bytes.</td><td>2</td>
  </tr>
  <tr>
    <td>ArrayOf&lt;Type&gt;</td><td>Array of a variable number of items of Type.</td><td>4</td>
  </tr>
</table>

### ProtocolVersion ### {#protocol-version}

An Integer describing the version of this communication protocol being used by a
PatchRequest or PatchResponse. This value guides the semantics and interpretation
of the fields sent.

This field is for future expansion. There is only one valid value, 0.

### SparseBitSet ### {#sparsebitset}

A data structure which compactly stores a set of distinct unsigned integers. The set is represented as
a tree where each node has a fixed number of children that recursively sub-divides an interval into
equal partitions. A tree of height <i>H</i> with branching factor <i>B</i> can store set membership
for integers in the interval [0 to <i>B</i><sup><i>H</i></sup>-1] inclusive. The tree is encoded into
a ByteString for transport.

To construct the tree <i>T</i> which encodes set <i>S</i> first select the branching factor <i>B</i>
(how many children each node has). <i>B</i> can be 4, 8, 16, or 32.

Note: the encoder can use any of the possible branching factors, but it is recommended to
use 4 as that has been shown to give the smallest encodings for most sets typically encountered.

Next, determine the height, <i>H</i>, of the tree:

<i>H</i> = ceil(log<sub><i>B</i></sub>(max(</i>S</i>) + 1))

Next create a tree of height H where all non-leaf nodes have <i>B</i> children. Each node in the tree
has a single value composed of <i>B</i> bits. Given a node <i>p</i> which has <i>B</i> children:
<i>c<sub>0</sub></i> ... <i>c<sub><i>B</i> - 1</sub></i> and is in a tree, <i>T</i>, of height
<i>H</i>, then:

*  D(<i>n</i>) is depth of node <i>n</i>: the number of edges between
    the root node and <i>n</i>.

*  Start(<i>c<sub>i</sub></i>) is the start (inclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     Start(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + <i>i</i> * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>

*  End(<i>c<sub>i</sub></i>) is the end (exclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     End(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + (<i>i</i> + 1) * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>

*  Start(root node) = 0

*  The value of node <i>p</i> is a string of <i>B</i> bits. If its bits are numbered from 0 (least
    significant) to <i>B</i> - 1 (most significant) then bit <i>i</i> will be 1 if the set <i>S</i>
    contains at least one member in the interval [Start(<i>c<sub>i</sub></i>),
    End(<i>c<sub>i</sub></i>)), otherwise bit <i>i</i> will be 0.

*  If for node <i>p</i>, End(<i>p</i>) - Start(<i>p</i>) = <i>B</i>, then <i>p</i> will have no
    children.

The tree is encoded into a bit string. When appending multiple-bit values to the bit string, bits
are added in order from least significant bit to most significant bit.

First append 2 bits which encode the branching factor:

<table>
  <tr>
    <th>Bits&nbsp;</th><th>Branching Factor</th>
  </tr>
  <tr><td>00</td><td>4</td></tr>
  <tr><td>01</td><td>8</td></tr>
  <tr><td>10</td><td>16</td></tr>
  <tr><td>11</td><td>32</td></tr>
</table>

Then append the value <i>H</i> - 1 as a 6 bit unsigned integer.

Next the nodes are encoded into the bit string by traversing the nodes of the <i>T</i> in level
order and appending the value for each non-zero node to the bit string. If all of the set values
covered by a node's interval are present within set <i>S</i>, then that node can instead be encoded
in the bit string as <i>B</i> bits all set to zero. All children of that node must not be encoded.

Lastly the bit string is converted into a ByteString by converting each consecutive group of 8 bits
into the next byte of the string.
If the number of bits in the bit string is not a multiple of 8, zero bits are appended to the
next multiple of 8.
The bit with the smallest index in the bit string is the least
significant bit in the byte and the bit with the largest index is the most significant bit.


<div class=example>
  The set {2, 33, 323} in a tree with a branching factor of 8 is encoded as the bit string:

  ```
  BitString:
  |- header |- lvl 0 |---- level 1 ----|------- level 2 -----------|
  |         |   n0   |   n1       n2   |   n3       n4       n5    |
  [ 10010000 10000100 10001000 10000000 00100000 01000000 00010000 ]

  Which then becomes the ByteString:
  [
    0b00001001,
    0b00100001,
    0b00010001,
    0b00000001,
    0b00000100,
    0b00000010,
    0b00001000
  ]
  ```

  First determine the height of the tree:

  <i>H</i> = ceil(log<sub>8</sub>(323 + 1)) = 3

  Then append

  *  branching factor = 8 = 01
  *  <i>H</i> - 1 = 2 = 000010

  Level 0:

  * root node, n<sub>0</sub> append 00100001. Bit 0 is set because there are set members in the interval
     [0, 64), and bit 5 is set due to members in the interval [320, 384).

  Level 1:

  * There will be two non-zero children corresponding to bit 0 and bit 5 in n<sub>0</sub>:
  * n<sub>1</sub> append 00010001. It is child 0 of n<sub>0</sub> and subdivides the interval
     [0, 64). Bit 0 is set since there are set members in [0, 8) and bit 4 for [32, 40).

  * n<sub>2</sub> append 00000001. It is child 5 of n<sub>0</sub> it subdivides the interval
     [320, 384). Bit 0 is set since there are set members in [320 - 328).

  Level 2:

  * n<sub>3</sub> append 00000100. Child 0 of n<sub>1</sub>, bit 2 is set for the interval [2, 3) or 2.
  * n<sub>4</sub> append 00000010. Child 4 of n<sub>1</sub>, bit 1 is set for the interval [33, 34) or 33.
  * n<sub>5</sub> append 00001000. Child 0 of n<sub>2</sub>, bit 3 is set for the interval [323, 324)
     or 323.

</div>

<div class=example>
  The set {0, 1, 2, ..., 17} can be encoded with a branching factor of 4 as:

  ```
  BitString:
  |- header | l0 |- lvl 1 -| l2  |
  |         | n0 | n1 | n2 | n3  |
  [ 00010000 1100 0000 1000 1100 ]

  ByteString:
  [
    0b00001000,
    0b00000011,
    0b00110001
  ]
  ```

  First determine the height of the tree:

  <i>H</i> = ceil(log<sub>4</sub>(17 + 1)) = 3

  Then append

  *  branching factor = 4 = 00
  *  <i>H</i> - 1 = 2 = 000010

  Level 0:
  *  n<sub>0</sub> append 0011. Bit 0 set for [0, 16), bit 1 set for [16, 32)

  Level 1:
  *  n<sub>1</sub> append 0000. All bits zero to indicate interval [0, 16) is fully filled.
  *  n<sub>2</sub> append 0001. Bit 0 set for [16, 20)

  Level 2:
  *  n<sub>3</sub> append 0011. Bit 0 set for value 16, bit 1 set for value 17.

</div>

### IntegerList ### {#integerlist}

A data structure which compactly represents a list of integers.
The list is encoded into a ByteString for transport.

There are three steps of encoding/compression: first delta, second zig-zag, and finally UIntBase128.

The final ByteString result is simply the concatenation of the individual UIntBase128
encoded bytes.

#### Delta Encoding #### {#integerlist-deltas}
Delta encoding converts a list of integers to a list of deltas between them.

A list L of n integers L<sub>i<sub>0..n-1</sub></sub> is converted into a list
of N integers D<sub>i<sub>0..n-1</sub></sub> as follows:

* D<sub>0</sub> = L<sub>0</sub>
* D<sub>i = 1..n-1</sub> = L<sub>i</sub> - L<sub>i-1<sub>

This has the effect of reducing the magnitude of the values, which reduces the number
of bytes required in the UIntBase128 encoding, below.

<div class="example">
```
// Note: unsorted
int_list = [23, 43, 12, 3, 67, 68, 69, 0]
delta_list = [23, 20, -31, -9, 64, 1, 1, -69]
```
</div>

#### Zig-Zag Encoding #### {#integerlist-zigzag}

Zig-Zag encoding reversibly converts signed integers to unsigned integers,
using the same number of bits. The entire range of values is supported.
This is required, as the [[#integerlist-uintbase128]] step works on
unsigned integers only. The encoding maps positive integer values as even positive integers and
negative integer values to odd positive integers. Psuedo code:

```
encode(n):
  if n >= 0:
    return n * 2
  else:
    return (n * -2) - 1

decode(n) {
  if n & 1:
    return -((n + 1) / 2)
  else:
    return n / 2
```

<div class="example">
<table>
<tr><th>Value</th><th>Zig-Zag Encoding</th></tr>
<tr><td>0</td><td>0</td></tr>
<tr><td>1</td><td>2</td></tr>
<tr><td>2</td><td>4</td></tr>
<tr><td>3</td><td>6</td></tr>
<tr><td>4</td><td>8</td></tr>
<tr><td>-1</td><td>1</td></tr>
<tr><td>-2</td><td>3</td></tr>
<tr><td>-3</td><td>5</td></tr>
<tr><td>-4</td><td>7</td></tr>
</table>
</div>

<div class="example">
```
delta_list = [23, 20, -31, -9, 64, 1, 1, -69]
zig_zag_encoded_list = [46, 40, 61, 17, 128, 2, 2, 137]
```
</div>

#### UIntBase128 Encoding #### {#integerlist-uintbase128}

UIntBase128 is a different variable length encoding of unsigned integers,
suitable for values up to 2<sup>32</sup>-1. A UIntBase128 encoded number
is a sequence of bytes for which the most significant bit is set for all but
the last byte, and clear for the last byte. The number itself is base 128
encoded in the lower 7 bits of each byte. Thus, a decoding procedure for
a UIntBase128 is: start with value = 0. Consume a byte, setting value =
old value times 128 + (byte bitwise-and 127). Repeat last step until
the most significant bit of byte is false.

UIntBase128 encoding format allows a possibility of sub-optimal encoding, where e.g.
the same numerical value can be represented with variable number of bytes (utilizing
leading zeros). For example, the value 63 could be encoded as either one byte 0x3F
or two (or more) bytes: [0x80, 0x3f]. An encoder must not allow this to happen and
*MUST* produce shortest possible encoding. A decoder *MUST* reject the font file
if it encounters a UIntBase128-encoded value with
leading zeros (a value that starts with the byte 0x80), if UIntBase128-encoded
sequence is longer than 5 bytes, or if a UIntBase128-encoded value exceeds
2<sup>32</sup>-1. Pseudo-code:

```
bool ReadUIntBase128( data, *result ) {
  UInt32 accum = 0;

  for (i = 0; i < 5; i++) {
    UInt8 data_byte = data.getNextUInt8();

    // No leading 0's
    if (i == 0 && data_byte == 0x80) return false;if (i == 0 && data_byte = 0x80) return false;

    // If any of top 7 bits are set then << 7 would overflow
    if (accum & 0xFE000000) return false;

    *accum = (accum << 7) | (data_byte & 0x7F);

    // Spin until most significant bit of data byte is false
    if ((data_byte & 0x80) == 0) {
      *result = accum;
      return true;
    }
  }
  // UIntBase128 sequence exceeds 5 bytes
  return false;
}
```

<div class="example">
```
Value       Output Bytes
0           00000000
1           00000001
2           00000010
3           00000011
127         01111111
128         10000000 00000001
255         11111111 00000001
16256       10000000 01111111
2080768     10000000 10000000 01111111
266338304   10000000 10000000 10000000 01111111
4294967295  11111111 11111111 11111111 11111111 00001111
```
</div>

<div class="example">
```
zig_zag_encoded_list = [46, 40, 61, 17, 128, 2, 2, 137]
bytes = [2E 28 3D 11 80 01 02 02 89 01]
         └┘ └┘ └┘ └┘ └───┘ └┘ └┘ └───┘
```
</div>


### SortedIntegerList ### {#sortedintegerlist}

A data structure which compactly represents a sorted list of non-negative integers.
The list is encoded into a ByteString for transport.

This is a variation on IntegerList with better compression.
Sorted lists only use two steps of encoding/compression: first deltas and then
UIntBase128.
The [[#integerlist-zigzag]] step is skipped.
This allows twice the range in UIntBase128, so that single bytes may be used more often.

</div>

### RangeList ### {#rangelist}

A RangeList encodes a set of unsigned 32 bit integers. The set is encoded as a
list of disjoint intervals. Each interval is represented by two integers, a
start (inclusive) and end (inclusive).

A RangeList is a list of n pairs
[min<sub>i<sub>0..n-1</sub></sub>, max<sub>i<sub>0..n-1</sub></sub>].
The list must be non-decreasing, i.e. min<sub>i=1..n-1</sub> >= max<sub>i-1<sub>.

To encode this list, we convert it to a list L of 2n integers, where
L<sub>2i</sub> = min<sub>i</sub> and L<sub>2i+1</sub> = max<sub>i</sub> for
i = 0..n-1.

L is a sorted list of integers, so [[#sortedintegerlist]] is used to encode it as a
ByteString.

<div class="example">
```
RangeList = [3, 10], [13, 268]
int list = [3, 10, 13, 268]
delta list = [3, 7, 3, 255]
// Sorted, so no Zig-Zag encoding.
IntegerList (sorted) = [0x03 0x07 0x03 0xFF 0x01]
```
</div>

### AxisSpace ### {#AxisSpace}

Stores a set of intervals on one or more open type variation axes [[opentype-variations]]</a>.
Encoded as a CBOR map (major type 5). The key in each pair is an
<a href="https://docs.microsoft.com/en-us/typography/opentype/spec/fvar#variationaxisrecord">
axis tag</a>. It is encoded as a ByteString containing exactly 4 ASCII characters. The value in each
pair is an <a href="#AxisInterval"><code>AxisInterval</code></a>.

### Objects ### {#objects}

Objects are data structures comprised of key and value pairs. Objects are encoded via CBOR as maps
(major type 5). Each key and value pair is encoded as a single map entry. Keys are always unsigned
integers and are encoded using major type 0. Values are encoded using the encoding specified by the
type of the value.

All fields in an object are optional and do not need to have an associated value. Conversely when
decoding and object fields may be present which are not specified in the schema. The decoder must
ignore without error any key and value pairs where the key is not recognized.

There are several types of object used, each type is defined by a schema in [[#schemas]]. The schema
for a type specifies for each field:

*  A human readable name for the field. For reference only, not used in the encoding.
*  A unsigned integer id for the field. This is used as the key in the encoding.
*  The type of the value stored in this field. Can be any of the types defined in [[#data-types]]
    including object types.

## Object Schemas ## {#schemas}

### CompressedSet ### {#CompressedSet}

Encodes a set of unsigned integers. The set is not ordered and does not
allow duplicates. Members of the set are encoded into either a SparseBitSet or a
RangeList. To obtain the final set the members of the sparse
bit set and the list of ranges are unioned together.

<table>
  <tr><th>ID&nbsp;</th><th>Field Name</th><th>Type</th></tr>
  <tr><td>0</td><td>sparse_bit_set</td><td>SparseBitSet (ByteString)</td></tr>
  <tr><td>1</td><td>range_deltas</td><td>RangeList (ByteString)</td></tr>
</table>

### AxisInterval ### {#AxisInterval}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>start</td><td>Float</td></tr>
  <tr><td>1</td><td>end</td><td>Float</td></tr>
</table>

<code>AxisInterval</code> defines an interval (from <code>start</code> to <code>end</code>) on some
variable axis in a font.

For an <code>AxisInterval</code> object to be well formed:

*  <code>start</code> must be set.

*  <code>end</code> is optional, must be greater than <code>start</code>. If <code>end</code> is not set
    then this interval is a single point, <code>start</code>.

### PatchRequest ### {#PatchRequest}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>protocol_version</td><td>ProtocolVersion (Integer)</td></tr>
  <tr><td>1</td><td>accept_patch_format</td><td>IntegerList (ByteString)</td></tr>
  <tr><td>2</td><td>codepoints_have</td><td>CompressedSet</td></tr>
  <tr><td>3</td><td>codepoints_needed</td><td>CompressedSet</td></tr>
  <tr><td>4</td><td>indices_have</td><td>CompressedSet</td></tr>
  <tr><td>5</td><td>indices_needed</td><td>CompressedSet</td></tr>
  <tr><td>6</td><td>axis_space_have</td><td>AxisSpace</td></tr>
  <tr><td>7</td><td>axis_space_needed</td><td>AxisSpace</td></tr>
  <tr><td>8</td><td>ordering_checksum</td><td>Integer</td></tr>
  <tr><td>9</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>10</td><td>base_checksum</td><td>Integer</td></tr>
  <tr><td>11</td><td>connection_speed</td><td>Integer</td></tr>
</table>

For a PatchRequest object to be well formed:

*  <code>protocol_version</code> must be set to 0.
*  <code>accept_patch_format</code> can include any of the values listed in [[#patch-formats]].
*  If either of <code>indices_have</code> or <code>indices_needed</code> is set to a non-empty set
    then <code>ordering_checksum</code> must be set.
*  If <code>codepoints_have</code> or <code>indices_have</code> is set to a non-empty set then
    <code>original_font_checksum</code> and <code>base_checksum</code> must be set.
*  <code>connection_speed</code> can be any of the values listed in [[#connection-speeds]].

### PatchResponse ### {#PatchResponse}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>protocol_version</td><td>ProtocolVersion (Integer)</td>
  <tr><td>1</td><td>patch_format</td><td>Integer</td></tr>
  <tr><td>2</td><td>patch</td><td>ByteString</td></tr>
  <tr><td>3</td><td>replacement</td><td>ByteString</td></tr>
  <tr><td>4</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>5</td><td>patched_checksum</td><td>Integer</td></tr>
  <tr><td>6</td><td>codepoint_ordering</td><td>IntegerList</td></tr>
  <tr><td>7</td><td>ordering_checksum</td><td>Integer</td></tr>
  <tr><td>8</td><td>subset_axis_space</td><td>ArrayOf&lt;AxisInterval&gt;</td></tr>
  <tr><td>9</td><td>original_axis_space</td><td>ArrayOf&lt;AxisInterval&gt;</td></tr>
</table>

For a PatchResponse object to be well formed:
*  <code>protocol_version</code> must be set to 0.
*  <code>patch_format</code> can be any of the values listed [[#patch-formats]]
*  Only one of <code>patch</code> or <code>replacement</code> may be set.
*  If either <code>patch</code> or <code>replacement</code> is set then <code>patch_format</code>,
     <code>patched_checksum</code>, and <code>original_font_checksum</code> must be set.
*  If <code>codepoint_ordering</code> is set then <code>ordering_checksum</code> must be set.

Client {#client}
----------------

### Client State ### {#client-state}

The client will need to maintain at minimum the following state for each font file being incrementally
transferred:

*  Font subset: a byte array containing the binary data for the most recent version of the subset of
    the font being incrementally transferred. For a new font this is initialized to empty byte array.
*  Original font checksum: the most recent value of
    <a href="#PatchResponse"><code>PatchResponse.original_font_checksum</code></a> received
    from the server for this font.
    
*  Codepoint Reordering Map: The most recent [[#codepoint-reordering]] received from the server
    for this font.
    
*  Codepoint Reordering Checksum: The most recent
    <a href="#PatchResponse"><code>PatchResponse.ordering_checksum</code></a>
    for this font.

*  Original Font Axis Space: the variations axis space that the original font covers. Supplied
    by <a href="#PatchResponse"><code>PatchResponse.original_axis_space</code></a>.

*  Subset Axis Space: the most recent variations axis space that the subsetted font covers. Supplied by
    <a href="#PatchResponse"><code>PatchResponse.subset_axis_space</code></a>.

### Extending the Font Subset ### {#extend-subset}

A client extends its font subset to cover additional codepoints by making HTTP requests to
a Patch Subset server. The HTTP request must use either the GET or POST method:

*  If sent as a POST request the post body will be a single
    <a href="#PatchRequest"><code>PatchRequest</code></a> object encoded via CBOR.

*  If sent as a GET request the client will include a single query parameter,
    <code>request</code>:<br/> the value is a single
    <a href="#PatchRequest"><code>PatchRequest</code></a> object encoded via CBOR and then base64url
    encoding [[rfc4648]].

For both POST and GET requests the path of the request identifies the specific font. All requests
must be made over HTTPS.

The fields of the <a href="#PatchRequest"><code>PatchRequest</code></a> object should be set
as follows:

*  <code>protocol_version</code>: set to 0.

*  <code>accept_patch_format</code>: set to the list of [[#patch-formats]] that this client is
    capable of decoding. Must contain at least one format.

*  <code>codepoints_have</code>: set to exactly the set of codepoints that the current font subset
    contains data for. If the current font subset is an empty byte array this field is left unset.
    If the client has a codepoint ordering for this font then this field should not be set.

*  <code>codepoints_needed</code>: set to the set of codepoints that the client wants to
    add to its font subset. If the client has a codepoint ordering for this font then this
    field should not be set.

*  <code>indices_have</code>: encodes the set of additional codepoints that the current
    font subset contains data for. The codepoint values are transformed to indices by applying
    [[#codepoint-reordering]] to each codepoint value. If the client does not have a codepoint
    ordering for this font then this field should not be set.

*  <code>indices_needed</code>: encodes the set of codepoints that the client wants to add to its
    font subset. The codepoint values are transformed to indices by applying
    [[#codepoint-reordering]] to each codepoint value. If the client does not have a codepoint
    ordering for this font then this field should not be set.

*  <code>axis_space_have</code>: set to the current value of <code>subset_axis_space</code>
    saved in the state for this font.

*  <code>axis_space_needed</code>: set to the intervals of each variable axis in the original
    font that the client wants to add to its font subset. If the client wants an entire axis
    from the original font then that axis should not be listed.

*  <code>ordering_checksum</code>: If either of <code>indices_have</code> or
    <code>indices_needed</code> is set then this must be set to the current value of
    <code>ordering_checksum</code> saved in the state for this font.

*  <code>original_font_checksum</code>:
    Set to saved value for <code>original_font_checksum</code> in the state for this font. If
    there is no saved value leave this field unset.

*  <code>base_checksum</code>:
    Set to the checksum of the font subset byte array saved in the state for this font. See:
    [[#computing-checksums]].

*  <code>connection_speed</code>:
    Can be optionally set by the client to a value from [[#connection-speeds]] by finding the value
    that corresponds to the client's average round trip time.

### Handling PatchResponse ### {#handling-patch-response}

If a server is able to successfully process a <a href="#PatchRequest"><code>PatchRequest</code></a>
if will respond with HTTP status code 200 and the body of the response will be a
<a href="#PatchResponse"><code>PatchResponse</code></a> object encoded via CBOR.
The client should interpret and process the fields of the object as follows:

1.  If field <code>replacement</code> is set then: the byte array in this field is a binary patch
     in the format specified by <code>patch_format</code>. Apply the binary patch to a base which
     is an empty byte array. Replace the saved font subset with the result of the patch application.

2. If field <code>patch</code> is set then:  the byte array in this field is a binary patch
    in the format specified by <code>patch_format</code>. Apply the binary patch to the saved font
    subset. Replace the saved font subset with the result of the patch application.

3. If either <code>replacement</code> or <code>patch</code> is set then:
    <a href="#computing-checksums">compute the checksum</a> of the font subset produced by the patch
    application in steps 1 or 2. If the computed checksum is not equal to <code>patched_checksum</code>
    this is a recoverable error. Follow the procedure in [[#client-side-checksum-mismatch]]. Otherwise
    update the saved original font checksum with the value in <code>original_font_checksum</code>.

4. If fields <code>codepoint_ordering</code> and <code>ordering_checksum</code> are set then update
    the saved codepoint ordering and checksum with the new values specified by these two fields.
    If neither <code>replacement</code> nor <code>patch</code> are set, then the client should
    resend the request that triggered this response but use the new codepoint ordering provided in
    this response.

5. If <code>original_axis_space</code> is set then update the saved original axis space with the value
    specified in this field.

6. If <code>subset_axis_space</code> is set then update the saved subset axis space with the value
    specified in this field.

### Client Side Checksum Mismatch ### {#client-side-checksum-mismatch}

If the the checksum of the font subset computed by the client does not match the
<code>patched_checksum</code> in the server's response then the client should:

1. Discard all currently saved state for this font.

2. <a href="#extend-subset">Resend the request</a>. Set the <code>codepoints_needed</code> field
    to the union of the codepoints in the discarded font subset and the set of code points
    the the previous request was trying to add.

Server: Responding to a PatchRequest {#handling-patch-request}
--------------------------------------------------------------

If the server receives a well formed <a href="#PatchRequest"><code>PatchRequest</code></a> over
HTTPS that was populated according to the requirements in [[#extend-subset]] then it should
respond with HTTP status code 200. The body of the response should be a single
<a href="#PatchRequest"><code>PatchResponse</code></a> object encoded via CBOR.

The path in the request identifies the specific font that a patch is desired for. From the request
object the server can produce two codepoint sets:

1.  Codepoints the client has: formed by the union of the codepoint sets specified by
     <code>codepoints_have</code> and <code>indices_have</code>. The indices in
     <code>indices_have</code> must be mapped to codepoints by the application of the
     codepoint reordering with a checksum matching <code>ordering_checksum</code>.

2.  Codepoints the client needs: formed by the union of the codepoint sets specified by
     <code>codepoints_needed</code> and <code>indices_needed</code>. The indices in
     <code>indices_needed</code> must be mapped to codepoints by the application of the
     codepoint reordering with a checksum matching <code>ordering_checksum</code>.

Likewise, the server can produce two variable axis spaces:

1.  Axis space the client has: provided by <code>axis_space_have</code>. If any axes in the font are
     not specified in <code>axis_space_have</code> then for those axes add their entire interval
     from the original font.

2. Axis space the client needs: provided by <code>axis_space_needed</code>. If any axes in the font are
     not specified in <code>axis_space_needed</code> then for those axes add their entire interval
     from the original font.

If the server does not recognize the codepoint ordering used by the client, it must respond
with a response that will cause the client to update it's codepoint ordering to one the server
will recognize via the process described in [[#handling-patch-response]] and not include any patch.
That is the <code>patch</code> and <code>replacement</code> fields must not be set.

Otherwise when the response is applied by the client following the process in
[[#handling-patch-response]] to a font subset with checksum <code>base_checksum</code> it must result
in an extended font subset:

*  That contains data for at least the union of the set of codepoints needed and the sets of
    codepoints the client already has.

*  That contains a variation axis space that covers at least the union of the axis space the client
    has and the axis space the client needs.

Additionally:
    
*  The format of the patch in the either the <code>patch</code> or <code>replace</code> fields must be
    one of those listed in <code>accept_patch_format</code>.

*  The value of <code>original_font_checksum</code> must be set to the checksum of the original font.
    The checksum value must computed by the procedure in [[#computing-checksums]].

*  If the set of codepoints the client has is empty the response must set the
    <code>codepoint_ordering</code> and <code>ordering_checksum</code> fields following
    [[#codepoint-reordering]].

*  If the set of codepoints the client has is empty and the original font has variation axes, the
    response must set the <code>original_axis_space</code> fields to the axis space covered by
    the original font.

*  If <code>patch</code> or <code>replacement</code> fields are set and the original font has
    variation axes, the response must set the <code>subset_axis_space</code> field to the axis space
    covered by the font subset.

*  If <code>accept_patch_format</code> contains any unrecognized patch formats the server should
    ignore the unrecognized ones. Likewise if <code>connection_speed</code> contains any unrecognized
    connection speeds the server should ignore the unrecognized ones.

Note: the server can optionally use the client's provided connection speed to inform how many extra
codepoints should be sent. For example on slower connections it may be more performant to send extra
codepoints if they can prevent a future request from needing to be sent.

Note: the server can respond with either a patch or a replacement but should try to produce a patch
where possible. Replacement's should only be used in situations where the server is unable to recreate
the client's state in order to generate a patch against it.

Possible error responses:

*  If the request is malformed the server may instead respond with http status code 400 to indicate an
    error.

*  If the requested font is not recognized by the server it may respond with http status code 404 to
    indicate a not found error.

Computing Checksums {#computing-checksums}
------------------------------------------

64 bit checksums of byte strings are computed using the
<a href="https://github.com/ztanml/fast-hash">fast hash</a> algorithm. A python like pseudo
code version of the algorithm is presented below:

```
# Constant values come fast hash: https://github.com/ztanml/fast-hash
SEED = 0x11743e80f437ffe6
M = 0x880355f21e6d1965

mix(value):
  value = value ^ (value >> 23)
  value = value * 0x2127599bf4325c37
  value = value ^ (value >> 47)
  return value

fast_hash(byte[] data):
  # When casting byte arrays into unsigned 64 bit integers the bytes are in little
  # endian order. That is the smallest index is the least significant byte.
  uint64 hash = SEED ^ (length(data) * M)
  for (i = 0; i <= length(bytes) - 8; i += 8)
    hash = (hash ^ mix((uint64) data[i:i+8])) * M

  remaining = length(data) % 8
  if not remaining:
    return mix(hash)

  uint64 last_value = (uint64) concat(data[length(data) - remaining:],
                                      [0] * (8 - remaining))
  return mix((hash ^ mix(last_value)) * M)
```

Note: a C implementation of fast hash can be found
<a href="https://github.com/ztanml/fast-hash">here</a>.

Codepoint Reordering {#codepoint-reordering}
--------------------------------------------

A codepoint reordering for a font defines a function which maps unicode codepoint values from the
font to a continuous space of [0, number of codepoints in the font). This transformation is intended
to reduce the cost of representing codepoint sets.

A codepoint ordering is encoded into a <code>CompressedList</code>. The list must contain all unicode
codepoints that are supported by the font. The index of a particular unicode codepoint in the list is
the new value for that codepoint.

A server is free to choose any codepoint ordering, but should try to pick one that will minimize the
size of encoded codepoint sets for that font.

### Codepoint Reordering Checksum ### {#reordering-checksum}

A checksum of a codepoint reordering can be computed as follows:

```
SEED = 0x11743e80f437ffe6
M = 0x880355f21e6d1965

mix(value):
  value = value ^ (value >> 23)
  value = value * 0x2127599bf4325c37
  value = value ^ (value >> 47)
  return value

fast_hash_ordering(uint64[] ordering):
  uint64 hash = SEED ^ (length(ordering) * 8 * M)
  for (i = 0; i < length(ordering); i++)
    # to ensure checksums are consistent across all platforms, the integers must be in little
    # endian order.
    hash = (hash ^ mix(little_endian (ordering[i])) * M

  return mix(hash)
```

Patch Formats {#patch-formats}
------------------------------

The following patch formats may be used by the server to create binary diffs between a source file
and a target file:

<table>
  <tr>
    <th>Format</th><th>Value</th><th>Notes</th>
  </tr>
  <tr>
    <td>VCDIFF</td><td>0</td>
    <td>Uses VCDIFF format [[!rfc3284]] to produce the patch. All client and server implementations
    must support this format.</td>
  </tr>
  <tr>
    <td>Brotli Shared Dictionary</td><td>1</td>
    <td>Uses brotli compression [[!rfc7932]] to produce the patch. The source file is used as a shared
    dictionary
    [[!Shared-Brotli]] given to the brotli compressor and decompressor.</td>
  </tr>
</table>

Connection Speeds {#connection-speeds}
--------------------------------------

The following connection speed values can be used:

<table>
  <tr>
    <th>Name</th><th>Value</th><th>Round Trip Times</th>
  </tr>
  <tr>
    <td>Very Slow</td><td>0</td><td>&gt; 1000 ms.</td>
  </tr>
  <tr>
    <td>Slow</td><td>1</td><td>[300 ms, 1000 ms)</td>
  </tr>
  <tr>
    <td>Average</td><td>2</td><td>[150 ms, 300 ms)</td>
  </tr>
  <tr>
    <td>Fast</td><td>3</td><td>[80 ms, 150 ms)</td>
  </tr>
  <tr>
    <td>Very Fast</td><td>4</td><td>[20 ms, 80 ms)</td>
  </tr>
  <tr>
    <td>Extremely Fast</td><td>5</td><td>[0 ms, 20 ms)</td>
  </tr>
</table>


Range Request Incremental Transfer {#range-request-incxfer}
===========================================================

The specification for range request based incremental transfer is currently being drafted and is
located in a separate document:
<a href="RangeRequest.html">Incremental Font Transfer via Range Request</a>


Using Incremental Font Transfer in HTML {#negotiating-transfer-type}
====================================================================

HTML content can specify that incremental font transfer can be used for a particular font URL
by using the "supports" syntax in the 'src:' attribute of a font face:

```
@font-face {
  ...
  src: url(a_font.ttf) format(truetype supports incremental);
}
```

An incrementally transferred font must be in a raw format such as truetype or opentype.
For the initial request for a font the client should assume that the server supports the patch subset
based method and send a PatchRequest via HTTP GET according to the requirements in [[#extend-subset]].

If the server does support the patch subset protocol it should respond appropriately following the
instructions in the patch subset section. However, if the server does not support the patch subset
protocol it should ignore the additional HTTP GET parameters and instead just begin sending the
umodified font file.

If the client receives a response containing (TODO(garretrieger) add a magic number to first 4 bytes) a
PatchResponse, then follow the instructions in the Patch Subset section and all future extension
requests for this URL can be sent as patch subset requests using POST.

Otherwise the client should follow the instructions in the Range Request section and all future
extension requests should be sent according the the Range Request specificiation.

<h2 class=no-num id=priv-sec>Privacy and Security Considerations</h2>

Issue: Note any issues that have been raised about privacy and security.
